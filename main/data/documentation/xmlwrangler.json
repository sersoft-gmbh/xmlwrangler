{
  "abstract" : [
    {
      "text" : "Easily deal with XMLs in Swift.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [

      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "XMLWrangler",
    "modules" : [
      {
        "name" : "XMLWrangler"
      }
    ],
    "role" : "collection",
    "roleHeading" : "Framework",
    "symbolKind" : "module",
    "title" : "XMLWrangler"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Installation",
          "level" : 2,
          "text" : "Installation",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Add the following dependency to your ",
              "type" : "text"
            },
            {
              "code" : "Package.swift",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            ".package(url: \"https:\/\/github.com\/sersoft-gmbh\/xmlwrangler\", from: \"6.0.0\"),"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Compatibility",
          "level" : 2,
          "text" : "Compatibility",
          "type" : "heading"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "inlineContent" : [
                        {
                          "text" : "Swift",
                          "type" : "text"
                        }
                      ],
                      "type" : "strong"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "inlineContent" : [
                        {
                          "text" : "XMLWrangler Package",
                          "type" : "text"
                        }
                      ],
                      "type" : "strong"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "<  5.2.0",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "1.x.y - 3.x.y",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : ">= 5.3.0, < 5.9.0",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "5.x.y",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : ">= 5.9.0",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "6.x.y",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        },
        {
          "anchor" : "Usage",
          "level" : 2,
          "text" : "Usage",
          "type" : "heading"
        },
        {
          "anchor" : "Elements",
          "level" : 3,
          "text" : "Elements",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Every element in an XML is represented by the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " struct. It has three properties, ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/name-swift.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " which reflects the element’s tag name, ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/attributes-swift.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " which contains all attributes of the element and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/content-swift.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " which describes the content of the element.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The content is an collection whose ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " is an enum. The enum has two cases: ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element\/string(_:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element\/element(_:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ". The order in the collection is the order in which the content has been found. So if an element first contains some text, then contains a child element and finally again some text,  ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/content-swift.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " will contain a ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element\/string(_:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " whose associated ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element\/StringPart",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " is the first text. Next there would be a ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element\/element(_:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " whose associated ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " would be the child element. Finally, there would be another ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element\/string(_:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " with the last text.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "While you can create an ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " with a content of ",
              "type" : "text"
            },
            {
              "code" : "[.string(\"abc\"), .string(\"def\"), .element(XMLElement(name: \"test\"))]",
              "type" : "codeVoice"
            },
            {
              "text" : ", and it would also lead to valid XML, it could be cleaned up to ",
              "type" : "text"
            },
            {
              "code" : "[.string(\"abcdef\"), .element(XMLElement(name: \"test\"))]",
              "type" : "codeVoice"
            },
            {
              "text" : ". To achieve that, it’s recommended to use the various ",
              "type" : "text"
            },
            {
              "code" : "append",
              "type" : "codeVoice"
            },
            {
              "text" : " functions on ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/content-swift.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " or even ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " directly when you can’t assure that the content is cleaned upon creation. If your element was created with an empty content (",
              "type" : "text"
            },
            {
              "code" : "[]",
              "type" : "codeVoice"
            },
            {
              "text" : "), and you append each of the content elements above, the ",
              "type" : "text"
            },
            {
              "code" : "append",
              "type" : "codeVoice"
            },
            {
              "text" : " functions make sure that they append the “def” string to the first “abc” string instead of adding another ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element\/string(_:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " to the content. If for some reason you still end up with a situation where your content has consecutive ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element\/string(_:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " elements, there’s a convenience function ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/compress()",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " (or it’s non-mutating sibling ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/compressed()",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : "), which merges these consecutive ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element\/string(_:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " elements into one.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " can be compared to another element and is considered equal if all three properties (",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/name-swift.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/attributes-swift.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/content-swift.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ") are equal. This means that for a big tree, all children of the root element will be compared. So be careful when comparing big trees and fall back to manually comparing ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/name-swift.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and\/or ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/attributes-swift.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " if necessary. ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " also conforms to ",
              "type" : "text"
            },
            {
              "code" : "Identifiable",
              "type" : "codeVoice"
            },
            {
              "text" : " and uses its ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/name-swift.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " as ",
              "type" : "text"
            },
            {
              "code" : "id",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Both, serializing and parsing XMLs with XMLWrangler relies on ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Parsing-XMLs",
          "level" : 3,
          "text" : "Parsing XMLs",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Parsing existing XMLs can be done using the static functions on ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ". You can parse either a given ",
              "type" : "text"
            },
            {
              "code" : "Data",
              "type" : "codeVoice"
            },
            {
              "text" : " object or a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " containing the XML.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If parsing succeeds, the parsed root object is returned. Otherwise whatever error happend along the way is thrown. Errors thrown are the ones created by ",
              "type" : "text"
            },
            {
              "code" : "Foundation.XMLParser",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "do {",
            "    let xml = \"\"\"",
            "              <?xml version='1.0' encoding='UTF-8'?>",
            "              <root myattr='myvalue'>",
            "                  <child1\/>",
            "                  <child2>some text<\/child2>",
            "              <\/root>",
            "              \"\"\"",
            "    let root = try XMLElement.parse(xml)",
            "} catch {",
            "    print(\"Something went wrong while parsing: \\(error)\")",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example, ",
              "type" : "text"
            },
            {
              "code" : "root.name.rawValue",
              "type" : "codeVoice"
            },
            {
              "text" : " would of course be ",
              "type" : "text"
            },
            {
              "code" : "\"root\"",
              "type" : "codeVoice"
            },
            {
              "text" : ". ",
              "type" : "text"
            },
            {
              "code" : "root.content",
              "type" : "codeVoice"
            },
            {
              "text" : " would contain two ",
              "type" : "text"
            },
            {
              "code" : ".element",
              "type" : "codeVoice"
            },
            {
              "text" : "s. The first would have a associated ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " with a ",
              "type" : "text"
            },
            {
              "code" : "name",
              "type" : "codeVoice"
            },
            {
              "text" : " of ",
              "type" : "text"
            },
            {
              "code" : "\"child1\"",
              "type" : "codeVoice"
            },
            {
              "text" : " and an empty ",
              "type" : "text"
            },
            {
              "code" : "content",
              "type" : "codeVoice"
            },
            {
              "text" : ". The ",
              "type" : "text"
            },
            {
              "code" : "name",
              "type" : "codeVoice"
            },
            {
              "text" : " of ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " of the second ",
              "type" : "text"
            },
            {
              "code" : ".element",
              "type" : "codeVoice"
            },
            {
              "text" : " would be ",
              "type" : "text"
            },
            {
              "code" : "\"child2\"",
              "type" : "codeVoice"
            },
            {
              "text" : " and its content would contain one ",
              "type" : "text"
            },
            {
              "code" : ".string",
              "type" : "codeVoice"
            },
            {
              "text" : " having ",
              "type" : "text"
            },
            {
              "code" : "\"some text\"",
              "type" : "codeVoice"
            },
            {
              "text" : " associated. ",
              "type" : "text"
            },
            {
              "code" : "root.attributes",
              "type" : "codeVoice"
            },
            {
              "text" : " would contain the value ",
              "type" : "text"
            },
            {
              "code" : "\"myvalue\"",
              "type" : "codeVoice"
            },
            {
              "text" : " for the key ",
              "type" : "text"
            },
            {
              "code" : "\"myattr\"",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Serializing-Elements",
          "level" : 3,
          "text" : "Serializing Elements",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Since you can parse XMLs, you can also convert an ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " to a String. For this, there are two functions on ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The first one just converts an ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " into a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ". This happens by creating an opening and ending tag (where the beginning tag contains the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/attributes-swift.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " if available) and putting the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/content-swift.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " of the element in between. Also, ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/content-swift.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " is compressed (using the aforementioned ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/compress()",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " function) before being serialized.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var root = XMLElement(name: \"root\", attributes: [\"myattr\": \"myvalue\"])",
            "root.content.append(element: \"child1\")",
            "root.content.append(element: XMLElement(name: \"child2\", content: \"some text\"))",
            "",
            "let xmlString = xml.serialize() \/\/ -> \"<root myattr=\\\"myvalue\\\"><child1\/><child2>some text<\/child2><\/root>\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the traditional XML header should also be added, there’s a second function which takes a version and a document encoding as additional parameters, but otherwise follows the same rules:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var root = XMLElement(name: \"root\", attributes: [\"myattr\": \"myvalue\"])",
            "root.content.append(element: \"child1\")",
            "root.content.append(element: XMLElement(name: \"child2\", content: \"some text\"))",
            "",
            "let xmlDocumentString = root.serializeAsDocument(at: DocumentVersion(major: 1), using: .utf8)",
            "\/\/ -> \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><root myattr=\\\"myvalue\\\"><child1\/><child2>some text<\/child2><\/root>\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Please note that XMLWrangler does not escape the string based on the given encoding. It simply uses it the generate the document header.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Both functions can take an additional parameter ",
              "type" : "text"
            },
            {
              "code" : "options",
              "type" : "codeVoice"
            },
            {
              "text" : " which contains a set of options to control the serialization behaviour. Currently the following options are possible:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/SerializationOptions\/pretty",
                      "isActive" : true,
                      "type" : "reference"
                    },
                    {
                      "text" : ": Use pretty formatting. This adds newlines around the tags to make the resulting XML more readable. This is usually not needed for processing XML.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/SerializationOptions\/singleQuoteAttributes",
                      "isActive" : true,
                      "type" : "reference"
                    },
                    {
                      "text" : ": When this option is present, then attributes of elements will be enclosed in single quotes (’) instead of double quotes (”).",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/SerializationOptions\/explicitClosingTag",
                      "isActive" : true,
                      "type" : "reference"
                    },
                    {
                      "text" : ": This option forces empty elements to be serialized with an explicit closing tag instead of using the shorthand ",
                      "type" : "text"
                    },
                    {
                      "code" : "\/>",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " syntax.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "anchor" : "Type-Safety",
          "level" : 3,
          "text" : "Type Safety",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "XMLWrangler will always extract all content and attributes as ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " internally. This is because XML itself does not differentiate between types like e.g. JSON does.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, there are many helper functions to safely look up and convert content and attributes of an ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "First, there are helpers to extract all child elements with a given name: ",
                      "type" : "text"
                    },
                    {
                      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/elements(named:)",
                      "isActive" : true,
                      "type" : "reference"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Next, there are helpers to extract an element at a given path: ",
                      "type" : "text"
                    },
                    {
                      "code" : "XMLElement\/element(at:)",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Another helper allows to extract attributes of an element: ",
                      "type" : "text"
                    },
                    {
                      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/attribute(for:)",
                      "isActive" : true,
                      "type" : "reference"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "It is then also possible to convert those attributes (for some types like e.g. ",
                      "type" : "text"
                    },
                    {
                      "code" : "RawRepresentable",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " you don’t need to pass a ",
                      "type" : "text"
                    },
                    {
                      "code" : "converter",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "): ",
                      "type" : "text"
                    },
                    {
                      "code" : "XMLElement\/convertedAttribute(for:converter:)",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Last but not least you can extract the string content of an Element: ",
                      "type" : "text"
                    },
                    {
                      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/stringContent()",
                      "isActive" : true,
                      "type" : "reference"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "And of course as you can with attributes, you can also convert string content: ",
                      "type" : "text"
                    },
                    {
                      "code" : "XMLElement\/convertedStringContent(converter:)",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "All these methods throw an error (",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/LookupError",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ") when something went wrong instead of returning optionals. If you prefern an optional, you can always use ",
              "type" : "text"
            },
            {
              "code" : "try?",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more information also check the header docs which describe these methods a little closer.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "anchor" : "Protocols",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/ExpressibleByXMLAttributeContent",
        "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/ExpressibleByXMLElement",
        "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLAttributeContentConvertible",
        "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElementConvertible"
      ],
      "title" : "Protocols"
    },
    {
      "anchor" : "Structures",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement"
      ],
      "title" : "Structures"
    },
    {
      "anchor" : "Type-Aliases",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLAttributeContentRepresentable",
        "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElementRepresentable",
        "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XWElement"
      ],
      "title" : "Type Aliases"
    },
    {
      "anchor" : "Enumerations",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLContentBuilder"
      ],
      "title" : "Enumerations"
    },
    {
      "anchor" : "Extended-Modules",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/Swift"
      ],
      "title" : "Extended Modules"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/xmlwrangler"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://XMLWrangler/documentation/XMLWrangler": {
  "abstract" : [
    {
      "text" : "Easily deal with XMLs in Swift.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "XMLWrangler",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler"
},
"doc://XMLWrangler/documentation/XMLWrangler/ExpressibleByXMLAttributeContent": {
  "abstract" : [
    {
      "text" : "Describes a type that can be created from an ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Attributes-swift.struct\/Content",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " instance.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ExpressibleByXMLAttributeContent"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/ExpressibleByXMLAttributeContent",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ExpressibleByXMLAttributeContent"
    }
  ],
  "role" : "symbol",
  "title" : "ExpressibleByXMLAttributeContent",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/expressiblebyxmlattributecontent"
},
"doc://XMLWrangler/documentation/XMLWrangler/ExpressibleByXMLElement": {
  "abstract" : [
    {
      "text" : "Describes a type that can be initialized with an ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ExpressibleByXMLElement"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/ExpressibleByXMLElement",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ExpressibleByXMLElement"
    }
  ],
  "role" : "symbol",
  "title" : "ExpressibleByXMLElement",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/expressiblebyxmlelement"
},
"doc://XMLWrangler/documentation/XMLWrangler/Swift": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/Swift",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Swift",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/swift"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLAttributeContentConvertible": {
  "abstract" : [
    {
      "text" : "Describes a type that can turn itself into an ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Attributes-swift.struct\/Content",
      "isActive" : true,
      "type" : "reference"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "XMLAttributeContentConvertible"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLAttributeContentConvertible",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "XMLAttributeContentConvertible"
    }
  ],
  "role" : "symbol",
  "title" : "XMLAttributeContentConvertible",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlattributecontentconvertible"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLAttributeContentRepresentable": {
  "abstract" : [
    {
      "text" : "Describes a type that can be converted from and to an ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Attributes-swift.struct\/Content",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " instance.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "XMLAttributeContentRepresentable"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLAttributeContentRepresentable",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "XMLAttributeContentRepresentable"
    }
  ],
  "role" : "symbol",
  "title" : "XMLAttributeContentRepresentable",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlattributecontentrepresentable"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLContentBuilder": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "XMLContentBuilder"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLContentBuilder",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "XMLContentBuilder"
    }
  ],
  "role" : "symbol",
  "title" : "XMLContentBuilder",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlcontentbuilder"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement": {
  "abstract" : [
    {
      "text" : "Represents an element in an XML structure.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "XMLElement"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "XMLElement"
    }
  ],
  "role" : "symbol",
  "title" : "XMLElement",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/Attributes-swift.struct/Content": {
  "abstract" : [
    {
      "text" : "Represents the content of an attribute.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Content"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Attributes-swift.struct\/Content",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Content"
    }
  ],
  "role" : "symbol",
  "title" : "XMLElement.Attributes.Content",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/Content-swift.struct/Element": {
  "abstract" : [
    {
      "text" : "Describes an part (element) of the ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : "’s content.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Element"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Element"
    }
  ],
  "role" : "symbol",
  "title" : "XMLElement.Content.Element",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/Content-swift.struct/Element/StringPart": {
  "abstract" : [
    {
      "text" : "The type used to represent a string content.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "StringPart"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element\/StringPart",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "StringPart"
    }
  ],
  "role" : "symbol",
  "title" : "XMLElement.Content.Element.StringPart",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/stringpart"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/Content-swift.struct/Element/element(_:)": {
  "abstract" : [
    {
      "text" : "Represents an xml element part.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "case"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "element"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV",
      "text" : "XMLElement"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element\/element(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "XMLElement.Content.Element.element(_:)",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/element(_:)"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/Content-swift.struct/Element/string(_:)": {
  "abstract" : [
    {
      "text" : "Represents a raw string part.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "case"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "string"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV",
      "text" : "XMLElement"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV7ContentV",
      "text" : "Content"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV7ContentV7ElementO",
      "text" : "Element"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV7ContentV7ElementO10StringParta",
      "text" : "StringPart"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element\/string(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "XMLElement.Content.Element.string(_:)",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/string(_:)"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/Content-swift.struct/compress()": {
  "abstract" : [
    {
      "text" : "Merges consecutive ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element\/string(_:)",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " elements into one.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "compress"
    },
    {
      "kind" : "text",
      "text" : "()"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/compress()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "compress()",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/compress()"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/Content-swift.struct/compressed()": {
  "abstract" : [
    {
      "text" : "Returns a compressed version of ",
      "type" : "text"
    },
    {
      "code" : "self",
      "type" : "codeVoice"
    },
    {
      "text" : ", where all consecutive ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/Element\/string(_:)",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " elements were merged into one.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "compressed"
    },
    {
      "kind" : "text",
      "text" : "() -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV",
      "text" : "XMLElement"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV7ContentV",
      "text" : "Content"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/Content-swift.struct\/compressed()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "compressed()",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/compressed()"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/LookupError": {
  "abstract" : [
    {
      "text" : "The error type that is thrown for all lookup operations on ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "LookupError"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/LookupError",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "LookupError"
    }
  ],
  "role" : "symbol",
  "title" : "XMLElement.LookupError",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/lookuperror"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/SerializationOptions/explicitClosingTag": {
  "abstract" : [
    {
      "text" : "Serialize empty elements with an explicit closing tag (e.g. ",
      "type" : "text"
    },
    {
      "code" : "<elem><\/elem>",
      "type" : "codeVoice"
    },
    {
      "text" : " instead of ",
      "type" : "text"
    },
    {
      "code" : "<elem\/>",
      "type" : "codeVoice"
    },
    {
      "text" : ").",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "explicitClosingTag"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV",
      "text" : "XMLElement"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV20SerializationOptionsV",
      "text" : "SerializationOptions"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/SerializationOptions\/explicitClosingTag",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "explicitClosingTag",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/explicitclosingtag"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/SerializationOptions/pretty": {
  "abstract" : [
    {
      "text" : "Use pretty formatting (by adding newlines between elements).",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "pretty"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV",
      "text" : "XMLElement"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV20SerializationOptionsV",
      "text" : "SerializationOptions"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/SerializationOptions\/pretty",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "pretty",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/pretty"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/SerializationOptions/singleQuoteAttributes": {
  "abstract" : [
    {
      "text" : "Use single quotes (",
      "type" : "text"
    },
    {
      "code" : "'",
      "type" : "codeVoice"
    },
    {
      "text" : ") instead of double quotes (",
      "type" : "text"
    },
    {
      "code" : "\"",
      "type" : "codeVoice"
    },
    {
      "text" : ") for attribute values.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "singleQuoteAttributes"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV",
      "text" : "XMLElement"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV20SerializationOptionsV",
      "text" : "SerializationOptions"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/SerializationOptions\/singleQuoteAttributes",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "singleQuoteAttributes",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/singlequoteattributes"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/attribute(for:)": {
  "abstract" : [
    {
      "text" : "Returns the value for a given attribute key if present.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "attribute"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "for"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV",
      "text" : "XMLElement"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV10AttributesV",
      "text" : "Attributes"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV10AttributesV3KeyV",
      "text" : "Key"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV",
      "text" : "XMLElement"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV10AttributesV",
      "text" : "Attributes"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV10AttributesV7ContentV",
      "text" : "Content"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/attribute(for:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "attribute(for:)",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/attribute(for:)"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/attributes-swift.property": {
  "abstract" : [
    {
      "text" : "The attributes of the element.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "attributes"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV",
      "text" : "XMLElement"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV10AttributesV",
      "text" : "Attributes"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/attributes-swift.property",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "attributes",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.property"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/content-swift.property": {
  "abstract" : [
    {
      "text" : "The content of the element.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "content"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV",
      "text" : "XMLElement"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV7ContentV",
      "text" : "Content"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/content-swift.property",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "content",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/content-swift.property"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/elements(named:)": {
  "abstract" : [
    {
      "text" : "Finds all element children with the given name inside the content the element on which this is called.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "elements"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "named"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV",
      "text" : "XMLElement"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV4NameV",
      "text" : "Name"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sa",
      "text" : "Array"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV",
      "text" : "XMLElement"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/elements(named:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "elements(named:)",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/elements(named:)"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/name-swift.property": {
  "abstract" : [
    {
      "text" : "The name of the element.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "name"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV",
      "text" : "XMLElement"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11XMLWrangler10XMLElementV4NameV",
      "text" : "Name"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/name-swift.property",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "name",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/name-swift.property"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElement/stringContent()": {
  "abstract" : [
    {
      "text" : "Returns the combined string content of the element.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "stringContent"
    },
    {
      "kind" : "text",
      "text" : "() "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement\/stringContent()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "stringContent()",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelement\/stringcontent()"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElementConvertible": {
  "abstract" : [
    {
      "text" : "Describes a type that can be converted to an ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "XMLElementConvertible"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElementConvertible",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "XMLElementConvertible"
    }
  ],
  "role" : "symbol",
  "title" : "XMLElementConvertible",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelementconvertible"
},
"doc://XMLWrangler/documentation/XMLWrangler/XMLElementRepresentable": {
  "abstract" : [
    {
      "text" : "A type that can be converted from and to an ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "XMLElementRepresentable"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElementRepresentable",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "XMLElementRepresentable"
    }
  ],
  "role" : "symbol",
  "title" : "XMLElementRepresentable",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xmlelementrepresentable"
},
"doc://XMLWrangler/documentation/XMLWrangler/XWElement": {
  "abstract" : [
    {
      "text" : "A typealias for ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XMLElement",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : ".",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "Use this if you run into conflicts with ",
      "type" : "text"
    },
    {
      "code" : "Foundation\/XMLElement",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "XWElement"
    }
  ],
  "identifier" : "doc:\/\/XMLWrangler\/documentation\/XMLWrangler\/XWElement",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "XWElement"
    }
  ],
  "role" : "symbol",
  "title" : "XWElement",
  "type" : "topic",
  "url" : "\/documentation\/xmlwrangler\/xwelement"
}
}
}