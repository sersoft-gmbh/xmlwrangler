{"interfaceLanguages":{"swift":[{"type":"module","path":"\/documentation","title":"Documentation","children":[{"children":[{"type":"groupMarker","title":"Protocols"},{"type":"protocol","title":"ExpressibleByXMLAttributeContent","path":"\/documentation\/xmlwrangler\/expressiblebyxmlattributecontent","children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/expressiblebyxmlattributecontent\/init(xmlattributecontent:)","title":"init?(xmlAttributeContent: XMLElement.Attributes.Content)","children":[{"title":"ExpressibleByXMLAttributeContent Implementations","children":[{"type":"init","title":"init?(xmlAttributeContent: XMLElement.Attributes.Content)","path":"\/documentation\/xmlwrangler\/expressiblebyxmlattributecontent\/init(xmlattributecontent:)-3j6bp"},{"title":"init?(xmlAttributeContent: XMLElement.Attributes.Content)","path":"\/documentation\/xmlwrangler\/expressiblebyxmlattributecontent\/init(xmlattributecontent:)-57hl","type":"init"},{"title":"init?(xmlAttributeContent: XMLElement.Attributes.Content)","path":"\/documentation\/xmlwrangler\/expressiblebyxmlattributecontent\/init(xmlattributecontent:)-94r05","type":"init"}],"type":"groupMarker"}],"type":"init"}]},{"type":"protocol","title":"ExpressibleByXMLElement","path":"\/documentation\/xmlwrangler\/expressiblebyxmlelement","children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"type":"groupMarker","title":"ExpressibleByXMLElement Implementations","children":[{"path":"\/documentation\/xmlwrangler\/expressiblebyxmlelement\/init(xml:)-76pd1","title":"init(xml: XMLElement) throws","type":"init"},{"path":"\/documentation\/xmlwrangler\/expressiblebyxmlelement\/init(xml:)-9t88v","title":"init(xml: XMLElement) throws","type":"init"},{"path":"\/documentation\/xmlwrangler\/expressiblebyxmlelement\/init(xml:)-3wu3r","title":"init(xml: XMLElement) throws","type":"init"}]}],"title":"init(xml: XMLElement) throws","type":"init","path":"\/documentation\/xmlwrangler\/expressiblebyxmlelement\/init(xml:)"},{"title":"Type Methods","type":"groupMarker"},{"title":"static func parsedFromXML(some StringProtocol) throws -> Self","type":"method","path":"\/documentation\/xmlwrangler\/expressiblebyxmlelement\/parsedfromxml(_:)-3qdph"},{"title":"static func parsedFromXML(Data) throws -> Self","type":"method","path":"\/documentation\/xmlwrangler\/expressiblebyxmlelement\/parsedfromxml(_:)-x5w6"}]},{"type":"protocol","title":"XMLAttributeContentConvertible","path":"\/documentation\/xmlwrangler\/xmlattributecontentconvertible","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","children":[{"type":"groupMarker","children":[{"title":"var xmlAttributeContent: XMLElement.Attributes.Content","type":"property","path":"\/documentation\/xmlwrangler\/xmlattributecontentconvertible\/xmlattributecontent-40rww"}],"title":"XMLAttributeContentConvertible Implementations"}],"path":"\/documentation\/xmlwrangler\/xmlattributecontentconvertible\/xmlattributecontent","title":"var xmlAttributeContent: XMLElement.Attributes.Content"}]},{"type":"protocol","title":"XMLElementConvertible","path":"\/documentation\/xmlwrangler\/xmlelementconvertible","children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var xml: XMLElement","path":"\/documentation\/xmlwrangler\/xmlelementconvertible\/xml","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func serializeAsXML(with: XMLElement.SerializationOptions) -> String","path":"\/documentation\/xmlwrangler\/xmlelementconvertible\/serializeasxml(with:)","type":"method"},{"title":"func serializeAsXMLDocument(at: XMLElement.DocumentVersion, in: XMLElement.DocumentEncoding, with: XMLElement.SerializationOptions) -> String","path":"\/documentation\/xmlwrangler\/xmlelementconvertible\/serializeasxmldocument(at:in:with:)","type":"method"}]},{"type":"groupMarker","title":"Structures"},{"type":"struct","title":"XMLElement","path":"\/documentation\/xmlwrangler\/xmlelement","children":[{"title":"Structures","type":"groupMarker"},{"children":[{"type":"groupMarker","title":"Structures"},{"type":"struct","title":"XMLElement.Attributes.Content","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/init(_:)","title":"init(XMLElement.Attributes.Content.RawValue)"},{"type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/init(rawvalue:)","title":"init(rawValue: XMLElement.Attributes.Content.RawValue)"},{"type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/init(stringliteral:)","title":"init(stringLiteral: XMLElement.Attributes.Content.StringLiteralType)"},{"type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/init(xmlattributecontent:)","title":"init(xmlAttributeContent: XMLElement.Attributes.Content)"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/debugdescription","title":"var debugDescription: String"},{"type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/description","title":"var description: String"},{"type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/rawvalue-swift.property","title":"let rawValue: XMLElement.Attributes.Content.RawValue"},{"type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/xmlattributecontent","title":"var xmlAttributeContent: XMLElement.Attributes.Content"},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/rawvalue-swift.typealias","title":"XMLElement.Attributes.Content.RawValue"},{"type":"typealias","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/stringliteraltype","title":"XMLElement.Attributes.Content.StringLiteralType"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/!=(_:_:)","type":"op"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/equatable-implementations","title":"Equatable Implementations"},{"type":"symbol","children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations"},{"type":"symbol","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(stringInterpolation: DefaultStringInterpolation)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/init(stringinterpolation:)","type":"init"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations"},{"type":"symbol","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/init(extendedgraphemeclusterliteral:)","type":"init"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations"},{"type":"symbol","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/hashvalue","type":"property","title":"var hashValue: Int"},{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/hash(into:)","type":"method","title":"func hash(into: inout Hasher)"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/rawrepresentable-implementations","title":"RawRepresentable Implementations"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content"},{"type":"struct","title":"XMLElement.Attributes.Contents","children":[{"type":"groupMarker","title":"Structures"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/iterator","type":"struct","title":"XMLElement.Attributes.Contents.Iterator","children":[{"title":"Instance Methods","type":"groupMarker"},{"title":"func next() -> XMLElement.Attributes.Contents.Element?","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/iterator\/next()"}]},{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/debugdescription","type":"property","title":"var debugDescription: String"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/description","type":"property","title":"var description: String"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/endindex","type":"property","title":"var endIndex: XMLElement.Attributes.Contents.Index"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/startindex","type":"property","title":"var startIndex: XMLElement.Attributes.Contents.Index"},{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/index(after:)","type":"method","title":"func index(after: XMLElement.Attributes.Contents.Index) -> XMLElement.Attributes.Contents.Index"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/makeiterator()","type":"method","title":"func makeIterator() -> XMLElement.Attributes.Contents.Iterator"},{"type":"groupMarker","title":"Subscripts"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/subscript(_:)","type":"subscript","title":"subscript(XMLElement.Attributes.Contents.Index) -> XMLElement.Attributes.Contents.Element"},{"type":"groupMarker","title":"Type Aliases"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/element","type":"typealias","title":"XMLElement.Attributes.Contents.Element"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/index","type":"typealias","title":"XMLElement.Attributes.Contents.Index"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/collection-implementations","type":"symbol","title":"Collection Implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/index(of:)","deprecated":true,"title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/indices(of:)","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/map(_:)-7jjd1","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"}]},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/mutablecollection-implementations","type":"symbol","title":"MutableCollection Implementations","children":[{"title":"Instance Methods","type":"groupMarker"},{"title":"func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/movesubranges(_:to:)"},{"title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/partition(by:)"},{"title":"func swapAt(Self.Index, Self.Index)","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/swapat(_:_:)"},{"title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/withcontiguousmutablestorageifavailable(_:)"}]},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/sequence-implementations","type":"symbol","title":"Sequence Implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/lazy","title":"var lazy: LazySequence<Self>"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/contains(_:)","title":"func contains(Self.Element) -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/filter(_:)-9bsqn","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/filter(_:)-k6y9","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?"},{"type":"method","deprecated":true,"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/flatmap(_:)-2an33","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/flatmap(_:)-3xzxn","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/map(_:)-96tnu","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/reversed()","title":"func reversed() -> [Self.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/sorted(using:)-1xbyf","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/sorted(using:)-2s7ct","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?"}]}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct"},{"type":"struct","title":"XMLElement.Attributes.Key","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init(XMLElement.Attributes.Key.RawValue)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/init(_:)"},{"type":"init","title":"init(rawValue: XMLElement.Attributes.Key.RawValue)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/init(rawvalue:)"},{"type":"init","title":"init(stringLiteral: XMLElement.Attributes.Key.StringLiteralType)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/init(stringliteral:)"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var debugDescription: String","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/debugdescription"},{"type":"property","title":"var description: String","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/description"},{"type":"property","title":"let rawValue: XMLElement.Attributes.Key.RawValue","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/rawvalue-swift.property"},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","title":"XMLElement.Attributes.Key.RawValue","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/rawvalue-swift.typealias"},{"type":"typealias","title":"XMLElement.Attributes.Key.StringLiteralType","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/stringliteraltype"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","title":"Equatable Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/equatable-implementations","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","type":"op","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/!=(_:_:)"}]},{"type":"symbol","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/expressiblebyextendedgraphemeclusterliteral-implementations","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/init(unicodescalarliteral:)","type":"init"}]},{"type":"symbol","title":"ExpressibleByStringLiteral Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/expressiblebystringliteral-implementations","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/init(extendedgraphemeclusterliteral:)","type":"init"}]},{"type":"symbol","title":"RawRepresentable Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/rawrepresentable-implementations","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init(from: any Decoder) throws","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/init(from:)"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var hashValue: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/hashvalue"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func encode(to: any Encoder) throws","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/encode(to:)"},{"type":"method","title":"func hash(into: inout Hasher)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/hash(into:)"}]}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key"},{"type":"struct","title":"XMLElement.Attributes.Keys","children":[{"type":"groupMarker","title":"Structures"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"title":"func next() -> XMLElement.Attributes.Keys.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/iterator\/next()","type":"method"}],"type":"struct","title":"XMLElement.Attributes.Keys.Iterator","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/iterator"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var debugDescription: String","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/debugdescription"},{"type":"property","title":"var description: String","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/description"},{"type":"property","title":"var endIndex: XMLElement.Attributes.Keys.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/endindex"},{"type":"property","title":"var startIndex: XMLElement.Attributes.Keys.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/startindex"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func index(after: XMLElement.Attributes.Keys.Index) -> XMLElement.Attributes.Keys.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/index(after:)"},{"type":"method","title":"func makeIterator() -> XMLElement.Attributes.Keys.Iterator","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/makeiterator()"},{"type":"groupMarker","title":"Subscripts"},{"type":"subscript","title":"subscript(XMLElement.Attributes.Keys.Index) -> XMLElement.Attributes.Keys.Element","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/subscript(_:)"},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","title":"XMLElement.Attributes.Keys.Element","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/element"},{"type":"typealias","title":"XMLElement.Attributes.Keys.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/index"},{"type":"groupMarker","title":"Default Implementations"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var count: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/count","type":"property"},{"title":"var first: Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/first","type":"property"},{"title":"var indices: DefaultIndices<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/indices","type":"property"},{"title":"var isEmpty: Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/isempty","type":"property"},{"title":"var underestimatedCount: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/underestimatedcount","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func distance(from: Self.Index, to: Self.Index) -> Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/distance(from:to:)","type":"method"},{"title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/drop(while:)","type":"method"},{"title":"func dropFirst(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/dropfirst(_:)","type":"method"},{"title":"func dropLast(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/droplast(_:)","type":"method"},{"title":"func firstIndex(of: Self.Element) -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/firstindex(of:)","type":"method"},{"title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/firstindex(where:)","type":"method"},{"title":"func firstRange<C>(of: C) -> Range<Self.Index>?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/firstrange(of:)","type":"method"},{"title":"func formIndex(inout Self.Index, offsetBy: Int)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/formindex(_:offsetby:)","type":"method"},{"title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/formindex(_:offsetby:limitedby:)","type":"method"},{"title":"func formIndex(after: inout Self.Index)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/formindex(after:)","type":"method"},{"title":"func index(Self.Index, offsetBy: Int) -> Self.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/index(_:offsetby:)","type":"method"},{"title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/index(_:offsetby:limitedby:)","type":"method"},{"title":"func index(of: Self.Element) -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/index(of:)","deprecated":true,"type":"method"},{"title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/indices(of:)","type":"method"},{"title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/indices(where:)","type":"method"},{"title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/map(_:)-5a30m","type":"method"},{"title":"func prefix(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/prefix(_:)","type":"method"},{"title":"func prefix(through: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/prefix(through:)","type":"method"},{"title":"func prefix(upTo: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/prefix(upto:)","type":"method"},{"title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/prefix(while:)","type":"method"},{"title":"func randomElement() -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/randomelement()","type":"method"},{"title":"func randomElement<T>(using: inout T) -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/randomelement(using:)","type":"method"},{"title":"func ranges<C>(of: C) -> [Range<Self.Index>]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/ranges(of:)","type":"method"},{"title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/removingsubranges(_:)","type":"method"},{"title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","type":"method"},{"title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)","type":"method"},{"title":"func suffix(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/suffix(_:)","type":"method"},{"title":"func suffix(from: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/suffix(from:)","type":"method"},{"title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/trimmingprefix(_:)","type":"method"},{"title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/trimmingprefix(while:)","type":"method"}],"type":"symbol","title":"Collection Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/collection-implementations"},{"children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","type":"op","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/!=(_:_:)"}],"type":"symbol","title":"Equatable Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/equatable-implementations"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var lazy: LazySequence<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/lazy","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/allsatisfy(_:)","type":"method"},{"title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/compactmap(_:)","type":"method"},{"title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/compare(_:_:)","type":"method"},{"title":"func contains(Self.Element) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/contains(_:)","type":"method"},{"title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/contains(where:)","type":"method"},{"title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/count(where:)","type":"method"},{"title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/elementsequal(_:)","type":"method"},{"title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/elementsequal(_:by:)","type":"method"},{"title":"func enumerated() -> EnumeratedSequence<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/enumerated()","type":"method"},{"title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/filter(_:)-4x5zv","type":"method"},{"title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/filter(_:)-6vxqu","type":"method"},{"title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/first(where:)","type":"method"},{"deprecated":true,"title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/flatmap(_:)-124gs","type":"method"},{"title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/flatmap(_:)-5tdij","type":"method"},{"title":"func forEach((Self.Element) throws -> Void) rethrows","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/foreach(_:)","type":"method"},{"title":"func formatted<S>(S) -> S.FormatOutput","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/formatted(_:)","type":"method"},{"title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/lexicographicallyprecedes(_:by:)","type":"method"},{"title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/map(_:)-5alsh","type":"method"},{"title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/max(by:)","type":"method"},{"title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/min(by:)","type":"method"},{"title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/reduce(_:_:)","type":"method"},{"title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/reduce(into:_:)","type":"method"},{"title":"func reversed() -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/reversed()","type":"method"},{"title":"func shuffled() -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/shuffled()","type":"method"},{"title":"func shuffled<T>(using: inout T) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/shuffled(using:)","type":"method"},{"title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/sorted(by:)","type":"method"},{"title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/sorted(using:)-4n9k","type":"method"},{"title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/sorted(using:)-4yn7j","type":"method"},{"title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/starts(with:)","type":"method"},{"title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/starts(with:by:)","type":"method"},{"title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/withcontiguousstorageifavailable(_:)","type":"method"}],"type":"symbol","title":"Sequence Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/sequence-implementations"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct"},{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init()","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/init()"},{"type":"init","title":"init(some Sequence<(XMLElement.Attributes.Key, XMLElement.Attributes.Content)>, uniquingKeysWith: (XMLElement.Attributes.Content, XMLElement.Attributes.Content) throws -> XMLElement.Attributes.Content) rethrows","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/init(_:uniquingkeyswith:)"},{"type":"init","title":"init(minimumCapacity: Int)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/init(minimumcapacity:)"},{"type":"init","title":"init(uniqueKeysWithContents: some Sequence<(XMLElement.Attributes.Key, XMLElement.Attributes.Content)>)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/init(uniquekeyswithcontents:)"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var contents: XMLElement.Attributes.Contents","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.property"},{"type":"property","title":"var keys: XMLElement.Attributes.Keys","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.property"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func filter((XMLElement.Attributes.Element) throws -> Bool) rethrows -> XMLElement.Attributes","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/filter(_:)"},{"type":"method","title":"func merge(XMLElement.Attributes, uniquingKeysWith: (XMLElement.Attributes.Content, XMLElement.Attributes.Content) throws -> XMLElement.Attributes.Content) rethrows","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/merge(_:uniquingkeyswith:)-134z7"},{"type":"method","title":"func merge(some Sequence<(XMLElement.Attributes.Key, XMLElement.Attributes.Content)>, uniquingKeysWith: (XMLElement.Attributes.Content, XMLElement.Attributes.Content) throws -> XMLElement.Attributes.Content) rethrows","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/merge(_:uniquingkeyswith:)-2dkp4"},{"type":"method","title":"func merging(XMLElement.Attributes, uniquingKeysWith: (XMLElement.Attributes.Content, XMLElement.Attributes.Content) throws -> XMLElement.Attributes.Content) rethrows -> XMLElement.Attributes","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/merging(_:uniquingkeyswith:)-37s76"},{"type":"method","title":"func merging(some Sequence<(XMLElement.Attributes.Key, XMLElement.Attributes.Content)>, uniquingKeysWith: (XMLElement.Attributes.Content, XMLElement.Attributes.Content) throws -> XMLElement.Attributes.Content) rethrows -> XMLElement.Attributes","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/merging(_:uniquingkeyswith:)-7rko5"},{"type":"method","title":"func removeAll(keepingCapacity: Bool)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/removeall(keepingcapacity:)"},{"type":"method","title":"func removeContent(forKey: XMLElement.Attributes.Key) -> XMLElement.Attributes.Content?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/removecontent(forkey:)"},{"type":"method","title":"func updateContent(XMLElement.Attributes.Content, forKey: XMLElement.Attributes.Key) -> XMLElement.Attributes.Content?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/updatecontent(_:forkey:)"},{"type":"groupMarker","title":"Subscripts"},{"type":"subscript","title":"subscript(XMLElement.Attributes.Key) -> XMLElement.Attributes.Content?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/subscript(_:)-1v9n0"},{"type":"subscript","title":"subscript(XMLElement.Attributes.Key, default _: @autoclosure () -> some XMLAttributeContentConvertible) -> XMLElement.Attributes.Content","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/subscript(_:default:)"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","title":"Collection Implementations","children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"title":"static func < (XMLElement.Attributes.Index, XMLElement.Attributes.Index) -> Bool","type":"op","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/_(_:_:)"},{"title":"Default Implementations","type":"groupMarker"},{"title":"Comparable Implementations","type":"symbol","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","title":"static func ... (Self) -> PartialRangeFrom<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/'...(_:)-ipkd"},{"type":"op","title":"static func ... (Self) -> PartialRangeThrough<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/'...(_:)-vdf4"},{"type":"op","title":"static func ... (Self, Self) -> ClosedRange<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/'...(_:_:)"},{"type":"op","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/'.._(_:)"},{"type":"op","title":"static func ..< (Self, Self) -> Range<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/'.._(_:_:)"},{"type":"op","title":"static func > (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/_(_:_:)-6ycbk"},{"type":"op","title":"static func >= (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/_=(_:_:)-5oumv"},{"type":"op","title":"static func <= (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/_=(_:_:)-9ekje"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/comparable-implementations"},{"title":"Equatable Implementations","type":"symbol","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/!=(_:_:)","type":"op"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/equatable-implementations"}],"title":"XMLElement.Attributes.Index","type":"struct","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var count: Int","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/count"},{"title":"var endIndex: XMLElement.Attributes.Index","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/endindex"},{"title":"var first: Self.Element?","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/first"},{"title":"var indices: DefaultIndices<Self>","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/indices"},{"title":"var isEmpty: Bool","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/isempty"},{"title":"var startIndex: XMLElement.Attributes.Index","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/startindex"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/distance(from:to:)"},{"title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/drop(while:)"},{"title":"func dropFirst(Int) -> Self.SubSequence","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/dropfirst(_:)"},{"title":"func dropLast(Int) -> Self.SubSequence","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/droplast(_:)"},{"title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/firstindex(where:)"},{"title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/formindex(_:offsetby:)"},{"title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/formindex(_:offsetby:limitedby:)"},{"title":"func formIndex(after: inout Self.Index)","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/formindex(after:)"},{"title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index(_:offsetby:)"},{"title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index(_:offsetby:limitedby:)"},{"title":"func index(after: XMLElement.Attributes.Index) -> XMLElement.Attributes.Index","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index(after:)"},{"title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/indices(where:)"},{"title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/map(_:)-9xj4p"},{"title":"func prefix(Int) -> Self.SubSequence","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/prefix(_:)"},{"title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/prefix(through:)"},{"title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/prefix(upto:)"},{"title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/prefix(while:)"},{"title":"func randomElement() -> Self.Element?","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/randomelement()"},{"title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/randomelement(using:)"},{"title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/removingsubranges(_:)"},{"title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)"},{"title":"func suffix(Int) -> Self.SubSequence","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/suffix(_:)"},{"title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/suffix(from:)"},{"title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/trimmingprefix(while:)"},{"title":"Subscripts","type":"groupMarker"},{"title":"subscript(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"subscript","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/subscript(_:)-7zahb"},{"title":"subscript<R>(R) -> Self.SubSequence","type":"subscript","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/subscript(_:)-8ysl2"},{"title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/subscript(_:)-92e75"},{"title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/subscript(_:)-9hwxq"},{"title":"subscript(XMLElement.Attributes.Index) -> XMLElement.Attributes.Element","type":"subscript","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/subscript(_:)-gq1a"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/collection-implementations"},{"type":"symbol","title":"CustomDebugStringConvertible Implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/debugdescription","type":"property","title":"var debugDescription: String"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/customdebugstringconvertible-implementations"},{"type":"symbol","title":"CustomStringConvertible Implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var description: String","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/description"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/customstringconvertible-implementations"},{"type":"symbol","title":"Equatable Implementations","children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/equatable-implementations"},{"type":"symbol","title":"ExpressibleByDictionaryLiteral Implementations","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (XMLElement.Attributes.Key, any XMLAttributeContentConvertible)...)"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/expressiblebydictionaryliteral-implementations"},{"type":"symbol","title":"Sequence Implementations","children":[{"title":"Structures","type":"groupMarker"},{"title":"XMLElement.Attributes.Iterator","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/iterator","type":"struct","children":[{"title":"Instance Methods","type":"groupMarker"},{"title":"func next() -> XMLElement.Attributes.Element?","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/iterator\/next()"}]},{"title":"Instance Properties","type":"groupMarker"},{"title":"var lazy: LazySequence<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/lazy","type":"property"},{"title":"var underestimatedCount: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/underestimatedcount","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/allsatisfy(_:)","type":"method"},{"title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/compactmap(_:)","type":"method"},{"title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/compare(_:_:)","type":"method"},{"title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contains(where:)","type":"method"},{"title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/count(where:)","type":"method"},{"title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/elementsequal(_:by:)","type":"method"},{"title":"func enumerated() -> EnumeratedSequence<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/enumerated()","type":"method"},{"title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/first(where:)","type":"method"},{"title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/flatmap(_:)-4yo6e","type":"method","deprecated":true},{"title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/flatmap(_:)-8fhwg","type":"method"},{"title":"func forEach((Self.Element) throws -> Void) rethrows","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/foreach(_:)","type":"method"},{"title":"func formatted<S>(S) -> S.FormatOutput","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/formatted(_:)","type":"method"},{"title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/lexicographicallyprecedes(_:by:)","type":"method"},{"title":"func makeIterator() -> XMLElement.Attributes.Iterator","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/makeiterator()","type":"method"},{"title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/map(_:)-5hcvs","type":"method"},{"title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/max(by:)","type":"method"},{"title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/min(by:)","type":"method"},{"title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/reduce(_:_:)","type":"method"},{"title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/reduce(into:_:)","type":"method"},{"title":"func reversed() -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/reversed()","type":"method"},{"title":"func shuffled() -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/shuffled()","type":"method"},{"title":"func shuffled<T>(using: inout T) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/shuffled(using:)","type":"method"},{"title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/sorted(by:)","type":"method"},{"title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/sorted(using:)-5swdy","type":"method"},{"title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/sorted(using:)-8mh3v","type":"method"},{"title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/starts(with:by:)","type":"method"},{"title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/withcontiguousstorageifavailable(_:)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"title":"XMLElement.Attributes.Element","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/element","type":"typealias"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/sequence-implementations"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct","title":"XMLElement.Attributes","type":"struct"},{"children":[{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init()","type":"init","title":"init()"},{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/allelements","type":"property","title":"var allElements: some Collection<XMLElement>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/allstrings","type":"property","title":"var allStrings: some Collection<String>"},{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/append(contentsof:)","type":"method","title":"func append(contentsOf: some Sequence<XMLElement>)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/append(elementof:)","type":"method","title":"func append(elementOf: some XMLElementConvertible)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/appendelement(_:)","type":"method","title":"func appendElement(XMLElement)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/appendelements(_:)","type":"method","title":"func appendElements(XMLElement...)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/appendstring(_:)","type":"method","title":"func appendString(XMLElement.Content.Element.StringPart)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/compress()","type":"method","title":"func compress()"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/compressed()","type":"method","title":"func compressed() -> XMLElement.Content"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/find(elementsnamed:recursive:)","type":"method","title":"func find(elementsNamed: XMLElement.Name, recursive: Bool) -> Array<XMLElement>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/findfirst(elementnamed:recursive:)","type":"method","title":"func findFirst(elementNamed: XMLElement.Name, recursive: Bool) -> XMLElement?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/findlast(elementnamed:recursive:)","type":"method","title":"func findLast(elementNamed: XMLElement.Name, recursive: Bool) -> XMLElement?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/serialize(with:)","type":"method","title":"func serialize(with: XMLElement.SerializationOptions) -> String"},{"type":"groupMarker","title":"Enumerations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element","type":"enum","children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/element(_:)","title":"case element(XMLElement)","type":"case"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/string(_:)","title":"case string(XMLElement.Content.Element.StringPart)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/init(stringliteral:)","title":"init(stringLiteral: XMLElement.Content.Element.StringLiteralType)","type":"init"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/init(xml:)","title":"init(xml: XMLElement)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/description","title":"var description: String","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/stringliteraltype","title":"XMLElement.Content.Element.StringLiteralType","type":"typealias"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/stringpart","title":"XMLElement.Content.Element.StringPart","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/!=(_:_:)","type":"op","title":"static func != (Self, Self) -> Bool"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(stringInterpolation: DefaultStringInterpolation)","type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/init(stringinterpolation:)"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/init(extendedgraphemeclusterliteral:)","type":"init"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"type":"groupMarker","title":"Type Methods"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/parsedfromxml(_:)-55x14","type":"method","title":"static func parsedFromXML(some StringProtocol) throws -> Self"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/parsedfromxml(_:)-5mwm6","type":"method","title":"static func parsedFromXML(Data) throws -> Self"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/expressiblebyxmlelement-implementations","title":"ExpressibleByXMLElement Implementations","type":"symbol"}],"title":"XMLElement.Content.Element"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/bidirectionalcollection-implementations","type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var last: Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/last","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/difference(from:)","type":"method"},{"title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/difference(from:by:)","type":"method"},{"title":"func dropLast(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/droplast(_:)","type":"method"},{"title":"func formIndex(before: inout Self.Index)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/formindex(before:)","type":"method"},{"title":"func index(before: XMLElement.Content.Index) -> XMLElement.Content.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/index(before:)","type":"method"},{"title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/last(where:)","type":"method"},{"title":"func lastIndex(of: Self.Element) -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/lastindex(of:)","type":"method"},{"title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/lastindex(where:)","type":"method"},{"title":"func reversed() -> ReversedCollection<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/reversed()","type":"method"},{"title":"func suffix(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/suffix(_:)","type":"method"}],"title":"BidirectionalCollection Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/collection-implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var count: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/count"},{"type":"property","title":"var endIndex: XMLElement.Content.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/endindex"},{"type":"property","title":"var first: Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/first"},{"type":"property","title":"var indices: DefaultIndices<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/indices-swift.property"},{"type":"property","title":"var isEmpty: Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/isempty"},{"type":"property","title":"var startIndex: XMLElement.Content.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/startindex"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func distance(from: XMLElement.Content.Index, to: XMLElement.Content.Index) -> Int","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/distance(from:to:)"},{"type":"method","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/drop(while:)"},{"type":"method","title":"func dropFirst(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/dropfirst(_:)"},{"type":"method","title":"func firstIndex(of: Self.Element) -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/firstindex(of:)"},{"type":"method","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/firstindex(where:)"},{"type":"method","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/firstrange(of:)"},{"type":"method","title":"func formIndex(inout Self.Index, offsetBy: Int)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/formindex(_:offsetby:)"},{"type":"method","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/formindex(_:offsetby:limitedby:)"},{"type":"method","title":"func formIndex(after: inout Self.Index)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/formindex(after:)"},{"type":"method","title":"func index(XMLElement.Content.Index, offsetBy: Int) -> XMLElement.Content.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/index(_:offsetby:)"},{"type":"method","title":"func index(after: XMLElement.Content.Index) -> XMLElement.Content.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/index(after:)"},{"deprecated":true,"type":"method","title":"func index(of: Self.Element) -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/index(of:)"},{"type":"method","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/indices(of:)"},{"type":"method","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/indices(where:)"},{"type":"method","title":"func makeIterator() -> IndexingIterator<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/makeiterator()"},{"type":"method","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/map(_:)-7mehe"},{"type":"method","title":"func prefix(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/prefix(_:)"},{"type":"method","title":"func prefix(through: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/prefix(through:)"},{"type":"method","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/prefix(upto:)"},{"type":"method","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/prefix(while:)"},{"type":"method","title":"func randomElement() -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/randomelement()"},{"type":"method","title":"func randomElement<T>(using: inout T) -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/randomelement(using:)"},{"type":"method","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/ranges(of:)"},{"type":"method","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removingsubranges(_:)"},{"type":"method","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)"},{"type":"method","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)"},{"type":"method","title":"func suffix(from: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/suffix(from:)"},{"type":"method","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/trimmingprefix(_:)"},{"type":"method","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/trimmingprefix(while:)"},{"type":"groupMarker","title":"Subscripts"},{"type":"subscript","title":"subscript(XMLElement.Content.Index) -> XMLElement.Content.Element","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/subscript(_:)"},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","title":"XMLElement.Content.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/index"},{"type":"typealias","title":"XMLElement.Content.Indices","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/indices"},{"type":"typealias","title":"XMLElement.Content.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/subsequence"}],"title":"Collection Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/customdebugstringconvertible-implementations","type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var debugDescription: String","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/debugdescription","type":"property"}],"title":"CustomDebugStringConvertible Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/customstringconvertible-implementations","type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var description: String","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/description","type":"property"}],"title":"CustomStringConvertible Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/equatable-implementations","type":"symbol","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/!=(_:_:)","type":"op"}],"title":"Equatable Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/expressiblebyarrayliteral-implementations","type":"symbol","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init(arrayLiteral: XMLElement.Content.ArrayLiteralElement...)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(arrayliteral:)"},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","title":"XMLElement.Content.ArrayLiteralElement","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/arrayliteralelement"}],"title":"ExpressibleByArrayLiteral Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/expressiblebyextendedgraphemeclusterliteral-implementations","type":"symbol","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(unicodescalarliteral:)","type":"init"}],"title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/expressiblebystringinterpolation-implementations","type":"symbol","children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(literalCapacity: Int, interpolationCount: Int)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/init(literalcapacity:interpolationcount:)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func appendInterpolation(some XMLElementConvertible)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/appendinterpolation(_:)-46jy","type":"method"},{"title":"func appendInterpolation(XMLElement.Content.Element...)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/appendinterpolation(_:)-4zdk6","type":"method"},{"title":"func appendInterpolation(XMLElement.Content)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/appendinterpolation(_:)-7v6zj","type":"method"},{"title":"func appendInterpolation(some StringProtocol)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/appendinterpolation(_:)-7xhft","type":"method"},{"title":"func appendInterpolation(some Sequence<XMLElement.Content.Element>)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/appendinterpolation(_:)-q0o5","type":"method"},{"title":"func appendInterpolation(contentOf: XMLElement)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/appendinterpolation(contentof:)","type":"method"},{"title":"func appendLiteral(XMLElement.Content.StringInterpolation.StringLiteralType)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/appendliteral(_:)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"title":"XMLElement.Content.StringInterpolation.StringLiteralType","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/stringliteraltype","type":"typealias"}],"title":"XMLElement.Content.StringInterpolation","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"title":"init(stringInterpolation: XMLElement.Content.StringInterpolation)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(stringinterpolation:)","type":"init"}],"title":"ExpressibleByStringInterpolation Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/expressiblebystringliteral-implementations","type":"symbol","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(extendedgraphemeclusterliteral:)"},{"title":"init(stringLiteral: XMLElement.Content.StringLiteralType)","type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(stringliteral:)"},{"title":"Type Aliases","type":"groupMarker"},{"title":"XMLElement.Content.StringLiteralType","type":"typealias","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringliteraltype"}],"title":"ExpressibleByStringLiteral Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/expressiblebyxmlelement-implementations","type":"symbol","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(xml: XMLElement)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(xml:)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"title":"static func parsedFromXML(Data) throws -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/parsedfromxml(_:)-5p21z","type":"method"},{"title":"static func parsedFromXML(some StringProtocol) throws -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/parsedfromxml(_:)-8ka0o","type":"method"}],"title":"ExpressibleByXMLElement Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/mutablecollection-implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Methods"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/movesubranges(_:to:)","title":"func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/partition(by:)-22mry","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/partition(by:)-6omqc","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removesubranges(_:)-5a3zm","title":"func removeSubranges(RangeSet<Self.Index>)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/reverse()","title":"func reverse()"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/shuffle()","title":"func shuffle()"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/shuffle(using:)","title":"func shuffle<T>(using: inout T)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/sort(using:)-1zdlr","title":"func sort<Comparator>(using: Comparator)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/sort(using:)-82hoj","title":"func sort<S, Comparator>(using: S)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?"}],"title":"MutableCollection Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/randomaccesscollection-implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Methods"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?"}],"title":"RandomAccessCollection Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/rangereplaceablecollection-implementations","type":"symbol","children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/+(_:_:)-3dh6y","title":"static func + <Other>(Other, Self) -> Self","type":"op"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/+(_:_:)-69lhz","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/+(_:_:)-9by0h","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/+=(_:_:)","title":"static func += <Other>(inout Self, Other)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(repeating:count:)","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/append(_:)","title":"func append(Self.Element)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/append(contentsof:)-4fnoj","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/applying(_:)","title":"func applying(CollectionDifference<Self.Element>) -> Self?","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> Self","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/insert(_:at:)","title":"func insert(Self.Element, at: Self.Index)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/insert(contentsof:at:)","title":"func insert<C>(contentsOf: C, at: Self.Index)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/poplast()","title":"func popLast() -> Self.Element?","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/remove(at:)","title":"func remove(at: Self.Index) -> Self.Element","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removeall(keepingcapacity:)","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removeall(where:)-75du6","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removeall(where:)-9e4tj","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removefirst()","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removefirst(_:)","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removelast()","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removelast(_:)","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removesubrange(_:)-4b3dl","title":"func removeSubrange(Range<Self.Index>)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removesubrange(_:)-5goqi","title":"func removeSubrange<R>(R)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removesubranges(_:)-56xzy","title":"func removeSubranges(RangeSet<Self.Index>)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/replace(_:with:maxreplacements:)","title":"func replace<C, Replacement>(C, with: Replacement, maxReplacements: Int)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/replacesubrange(_:with:)","title":"func replaceSubrange(Range<XMLElement.Content.Index>, with: some Collection<XMLElement.Content.Element>)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/replacesubrange(_:with:)-3qvup","title":"func replaceSubrange<C, R>(R, with: C)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/replacesubrange(_:with:)-4dxdt","title":"func replaceSubrange<C>(Range<Self.Index>, with: C)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/replacing(_:with:maxreplacements:)","title":"func replacing<C, Replacement>(C, with: Replacement, maxReplacements: Int) -> Self","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/replacing(_:with:subrange:maxreplacements:)","title":"func replacing<C, Replacement>(C, with: Replacement, subrange: Range<Self.Index>, maxReplacements: Int) -> Self","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/reservecapacity(_:)","title":"func reserveCapacity(Int)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/trimprefix(_:)","title":"func trimPrefix<Prefix>(Prefix)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/trimprefix(while:)","title":"func trimPrefix(while: (Self.Element) throws -> Bool) rethrows","type":"method"}],"title":"RangeReplaceableCollection Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/sequence-implementations","type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var lazy: LazySequence<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/lazy","type":"property"},{"title":"var underestimatedCount: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/underestimatedcount","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/allsatisfy(_:)","type":"method"},{"title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/compactmap(_:)","type":"method"},{"title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/compare(_:_:)","type":"method"},{"title":"func contains(Self.Element) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/contains(_:)","type":"method"},{"title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/contains(where:)","type":"method"},{"title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/count(where:)","type":"method"},{"title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/elementsequal(_:)","type":"method"},{"title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/elementsequal(_:by:)","type":"method"},{"title":"func enumerated() -> EnumeratedSequence<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/enumerated()","type":"method"},{"title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/first(where:)","type":"method"},{"title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/flatmap(_:)-50w1t","type":"method"},{"deprecated":true,"title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/flatmap(_:)-6lar","type":"method"},{"title":"func forEach((Self.Element) throws -> Void) rethrows","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/foreach(_:)","type":"method"},{"title":"func formatted<S>(S) -> S.FormatOutput","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/formatted(_:)","type":"method"},{"title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/lexicographicallyprecedes(_:by:)","type":"method"},{"title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/map(_:)-12xfk","type":"method"},{"title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/max(by:)","type":"method"},{"title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/min(by:)","type":"method"},{"title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/reduce(_:_:)","type":"method"},{"title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/reduce(into:_:)","type":"method"},{"title":"func shuffled() -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/shuffled()","type":"method"},{"title":"func shuffled<T>(using: inout T) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/shuffled(using:)","type":"method"},{"title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/sorted(by:)","type":"method"},{"title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/sorted(using:)-2qxab","type":"method"},{"title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/sorted(using:)-5odpt","type":"method"},{"title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/starts(with:)","type":"method"},{"title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/starts(with:by:)","type":"method"},{"title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/withcontiguousstorageifavailable(_:)","type":"method"}],"title":"Sequence Implementations"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct","title":"XMLElement.Content","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/init(rawvalue:)","title":"init(rawValue: XMLElement.DocumentEncoding.RawValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/rawvalue-swift.property","title":"let rawValue: XMLElement.DocumentEncoding.RawValue","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/rawvalue-swift.typealias","title":"XMLElement.DocumentEncoding.RawValue","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/ascii","title":"static let ascii: XMLElement.DocumentEncoding","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/utf16","title":"static let utf16: XMLElement.DocumentEncoding","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/utf8","title":"static let utf8: XMLElement.DocumentEncoding","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/equatable-implementations","title":"Equatable Implementations","type":"symbol","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/!=(_:_:)","type":"op"}]},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var hashValue: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/hashvalue","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func hash(into: inout Hasher)","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/hash(into:)","type":"method"}]}],"path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding","title":"XMLElement.DocumentEncoding","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"title":"static func < (XMLElement.DocumentVersion, XMLElement.DocumentVersion) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/_(_:_:)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"title":"init(major: Int, minor: Int)","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/init(major:minor:)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var description: String","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/description","type":"property"},{"title":"var major: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/major","type":"property"},{"title":"var minor: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/minor","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"title":"Comparable Implementations","children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/'...(_:)-5f3hz","type":"op","title":"static func ... (Self) -> PartialRangeFrom<Self>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/'...(_:)-9nili","type":"op","title":"static func ... (Self) -> PartialRangeThrough<Self>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/'...(_:_:)","type":"op","title":"static func ... (Self, Self) -> ClosedRange<Self>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/'.._(_:)","type":"op","title":"static func ..< (Self) -> PartialRangeUpTo<Self>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/'.._(_:_:)","type":"op","title":"static func ..< (Self, Self) -> Range<Self>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/_(_:_:)-8n415","type":"op","title":"static func > (Self, Self) -> Bool"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/_=(_:_:)-9mt1x","type":"op","title":"static func >= (Self, Self) -> Bool"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/_=(_:_:)-ctbn","type":"op","title":"static func <= (Self, Self) -> Bool"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/comparable-implementations","type":"symbol"},{"title":"Equatable Implementations","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/!=(_:_:)","title":"static func != (Self, Self) -> Bool"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/equatable-implementations","type":"symbol"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion","title":"XMLElement.DocumentVersion","type":"struct"},{"children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var description: String","path":"\/documentation\/xmlwrangler\/xmlelement\/missingrootelementerror\/description"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","title":"Error Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/missingrootelementerror\/error-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var localizedDescription: String","path":"\/documentation\/xmlwrangler\/xmlelement\/missingrootelementerror\/localizeddescription"}]}],"path":"\/documentation\/xmlwrangler\/xmlelement\/missingrootelementerror","title":"XMLElement.MissingRootElementError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(XMLElement.Name.RawValue)","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/init(_:)","type":"init"},{"title":"init(rawValue: XMLElement.Name.RawValue)","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/init(rawvalue:)","type":"init"},{"title":"init(stringLiteral: XMLElement.Name.StringLiteralType)","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/init(stringliteral:)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var debugDescription: String","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/debugdescription","type":"property"},{"title":"var description: String","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/description","type":"property"},{"title":"let rawValue: XMLElement.Name.RawValue","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/rawvalue-swift.property","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"title":"XMLElement.Name.RawValue","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/rawvalue-swift.typealias","type":"typealias"},{"title":"XMLElement.Name.StringLiteralType","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/stringliteraltype","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"title":"Equatable Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/equatable-implementations","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","title":"static func != (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/!=(_:_:)"}],"type":"symbol"},{"title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/expressiblebyextendedgraphemeclusterliteral-implementations","children":[{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/init(unicodescalarliteral:)","type":"init","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)"}],"type":"symbol"},{"title":"ExpressibleByStringLiteral Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/expressiblebystringliteral-implementations","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/init(extendedgraphemeclusterliteral:)"}],"type":"symbol"},{"title":"RawRepresentable Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/rawrepresentable-implementations","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(from: any Decoder) throws","type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/init(from:)"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var hashValue: Int","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/hashvalue"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func encode(to: any Encoder) throws","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/encode(to:)"},{"title":"func hash(into: inout Hasher)","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/hash(into:)"}],"type":"symbol"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct","title":"XMLElement.Name","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(rawValue: XMLElement.SerializationOptions.RawValue)","type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/init(rawvalue:)"},{"title":"Instance Properties","type":"groupMarker"},{"title":"let rawValue: XMLElement.SerializationOptions.RawValue","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/rawvalue-swift.property"},{"title":"Type Aliases","type":"groupMarker"},{"title":"XMLElement.SerializationOptions.RawValue","type":"typealias","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/rawvalue-swift.typealias"},{"title":"Type Properties","type":"groupMarker"},{"title":"static let explicitClosingTag: XMLElement.SerializationOptions","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/explicitclosingtag"},{"title":"static let pretty: XMLElement.SerializationOptions","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/pretty"},{"title":"static let singleQuoteAttributes: XMLElement.SerializationOptions","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/singlequoteattributes"},{"title":"Default Implementations","type":"groupMarker"},{"title":"Equatable Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/equatable-implementations","children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/!=(_:_:)","type":"op","title":"static func != (Self, Self) -> Bool"}]},{"title":"OptionSet Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/optionset-implementations","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init()","type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/init()"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func contains(Self) -> Bool","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/contains(_:)"},{"title":"func formIntersection(Self)","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/formintersection(_:)"},{"title":"func formSymmetricDifference(Self)","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/formsymmetricdifference(_:)"},{"title":"func formUnion(Self)","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/formunion(_:)"},{"title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/insert(_:)"},{"title":"func intersection(Self) -> Self","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/intersection(_:)"},{"title":"func remove(Self.Element) -> Self.Element?","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/remove(_:)"},{"title":"func symmetricDifference(Self) -> Self","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/symmetricdifference(_:)"},{"title":"func union(Self) -> Self","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/union(_:)"},{"title":"func update(with: Self.Element) -> Self.Element?","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/update(with:)"}]},{"title":"SetAlgebra Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/setalgebra-implementations","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init<S>(S)","type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/init(_:)"},{"title":"init(arrayLiteral: Self.Element...)","type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/init(arrayliteral:)"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var isEmpty: Bool","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/isempty"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func isDisjoint(with: Self) -> Bool","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/isdisjoint(with:)"},{"title":"func isStrictSubset(of: Self) -> Bool","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/isstrictsubset(of:)"},{"title":"func isStrictSuperset(of: Self) -> Bool","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/isstrictsuperset(of:)"},{"title":"func isSubset(of: Self) -> Bool","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/issubset(of:)"},{"title":"func isSuperset(of: Self) -> Bool","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/issuperset(of:)"},{"title":"func subtract(Self)","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/subtract(_:)"},{"title":"func subtracting(Self) -> Self","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/subtracting(_:)"}]}],"path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions","title":"XMLElement.SerializationOptions","type":"struct"},{"children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/unknownparsingerror\/description","type":"property","title":"var description: String"},{"type":"groupMarker","title":"Default Implementations"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var localizedDescription: String","path":"\/documentation\/xmlwrangler\/xmlelement\/unknownparsingerror\/localizeddescription","type":"property"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/unknownparsingerror\/error-implementations","type":"symbol","title":"Error Implementations"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/unknownparsingerror","title":"XMLElement.UnknownParsingError","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/init(name:attributes:content:)-5rtdv","title":"init(name: XMLElement.Name, attributes: XMLElement.Attributes, content: XMLElement.Content.Element...)","type":"init"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/init(name:attributes:content:)-81fri","title":"init<E>(name: XMLElement.Name, attributes: XMLElement.Attributes, content: () async throws(E) -> XMLElement.Content) async throws(E)","type":"init"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/init(name:attributes:content:)-86ua4","title":"init<E>(name: XMLElement.Name, attributes: XMLElement.Attributes, content: () throws(E) -> XMLElement.Content) throws(E)","type":"init"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/init(name:attributes:content:)-kgzp","title":"init(name: XMLElement.Name, attributes: XMLElement.Attributes, content: XMLElement.Content)","type":"init"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/init(name:attributes:elements:)-4kmbt","title":"init(name: XMLElement.Name, attributes: XMLElement.Attributes, elements: XMLElement...)","type":"init"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/init(name:attributes:elements:)-7lxxa","title":"init(name: XMLElement.Name, attributes: XMLElement.Attributes, elements: some Sequence<XMLElement>)","type":"init"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/init(name:attributes:stringcontent:)","title":"init(name: XMLElement.Name, attributes: XMLElement.Attributes, stringContent: XMLElement.Content.Element.StringPart)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.property","title":"var attributes: XMLElement.Attributes","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.property","title":"var content: XMLElement.Content","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/id","title":"var id: XMLElement.Name","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.property","title":"let name: XMLElement.Name","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/append(contentsof:)","title":"func append(contentsOf: some Sequence<XMLElement>)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/append(elementof:)","title":"func append(elementOf: some XMLElementConvertible)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/appendelement(_:)","title":"func appendElement(XMLElement)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/appendelements(_:)","title":"func appendElements(XMLElement...)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/appendstring(_:)","title":"func appendString(XMLElement.Content.Element.StringPart)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attribute(for:)","title":"func attribute(for: XMLElement.Attributes.Key) throws -> XMLElement.Attributes.Content","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/converted(to:)","title":"func converted<Target>(to: Target.Type) throws -> Target","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:)-1x866","title":"func convertedAttribute<Target>(for: XMLElement.Attributes.Key) throws -> Target","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:)-29eim","title":"func convertedAttribute<T>(for: XMLElement.Attributes.Key) throws -> T","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:)-3butp","title":"func convertedAttribute<Target>(for: XMLElement.Attributes.Key) throws -> Target","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:)-3wjco","title":"func convertedAttribute<T>(for: XMLElement.Attributes.Key) throws -> T","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:)-7n67i","title":"func convertedAttribute<Target>(for: XMLElement.Attributes.Key) throws -> Target","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:)-7pgeq","title":"func convertedAttribute<T>(for: XMLElement.Attributes.Key) throws -> T","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:)-j6st","title":"func convertedAttribute<Target>(for: XMLElement.Attributes.Key) throws -> Target","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:converter:)-1pm40","title":"func convertedAttribute<T>(for: XMLElement.Attributes.Key, converter: (XMLElement.Attributes.Content) throws -> T?) throws -> T","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:converter:)-2tsl","title":"func convertedAttribute<T>(for: XMLElement.Attributes.Key, converter: (XMLElement.Attributes.Content) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/convertedstringcontent()-44s62","title":"func convertedStringContent<T>() throws -> T","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/convertedstringcontent()-4i8zf","title":"func convertedStringContent<T>() throws -> T","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/convertedstringcontent()-6gudh","title":"func convertedStringContent<T>() throws -> T","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/convertedstringcontent(converter:)-1fj6u","title":"func convertedStringContent<T>(converter: (String) throws -> T?) throws -> T","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/convertedstringcontent(converter:)-5nxzr","title":"func convertedStringContent<T>(converter: (String) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/element(at:)-45kz","title":"func element(at: some Collection<XMLElement.Name>) throws -> XMLElement","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/element(at:)-7xp8e","title":"func element(at: XMLElement.Name...) throws -> XMLElement","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/elements(named:)","title":"func elements(named: XMLElement.Name) throws -> Array<XMLElement>","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/remove(elementat:)-9v7qi","title":"func remove(elementAt: XMLElement.Name...) throws -> XMLElement?","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/remove(elementat:)-9ydn7","title":"func remove(elementAt: some Collection<XMLElement.Name>) throws -> XMLElement?","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/replace(elementat:with:)-1onn0","title":"func replace(elementAt: XMLElement.Name..., with: XMLElement) throws -> XMLElement","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/replace(elementat:with:)-4vaaw","title":"func replace(elementAt: some Collection<XMLElement.Name>, with: XMLElement) throws -> XMLElement","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/serialize(with:)","title":"func serialize(with: XMLElement.SerializationOptions) -> String","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/serializeasdocument(at:in:with:)","title":"func serializeAsDocument(at: XMLElement.DocumentVersion, in: XMLElement.DocumentEncoding, with: XMLElement.SerializationOptions) -> String","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/stringcontent()","title":"func stringContent() throws -> String","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/withmutatingaccess(toelementat:do:)-47tub","title":"func withMutatingAccess<T>(toElementAt: XMLElement.Name..., do: (inout XMLElement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/withmutatingaccess(toelementat:do:)-98ke7","title":"func withMutatingAccess<T>(toElementAt: some Collection<XMLElement.Name>, do: (inout XMLElement) throws -> T) throws -> T","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/parse(_:)-3lced","title":"static func parse(some StringProtocol) throws -> XMLElement","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/parse(_:)-43xl1","title":"static func parse(Data) throws -> XMLElement","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"title":"case attribute(quotes: XMLElement.EscapableContent.Quotes)","type":"case","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/attribute(quotes:)"},{"title":"case cdata","type":"case","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/cdata"},{"title":"case comment","type":"case","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/comment"},{"title":"case processingInstruction","type":"case","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/processinginstruction"},{"title":"case text","type":"case","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/text"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var description: String","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/description"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func escape(some StringProtocol) -> String","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/escape(_:)"},{"title":"Enumerations","type":"groupMarker"},{"title":"XMLElement.EscapableContent.Quotes","type":"enum","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/quotes","children":[{"type":"groupMarker","title":"Enumeration Cases"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/quotes\/double","type":"case","title":"case double"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/quotes\/single","type":"case","title":"case single"},{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/quotes\/description","type":"property","title":"var description: String"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/quotes\/equatable-implementations","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","type":"op","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/quotes\/!=(_:_:)"}],"type":"symbol","title":"Equatable Implementations"}]},{"title":"Default Implementations","type":"groupMarker"},{"title":"Equatable Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/equatable-implementations","children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/!=(_:_:)","type":"op","title":"static func != (Self, Self) -> Bool"}]}],"path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent","title":"XMLElement.EscapableContent","type":"enum"},{"children":[{"type":"groupMarker","title":"Enumeration Cases"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/cannotconvertattribute(element:key:content:type:)","type":"case","title":"case cannotConvertAttribute(element: XMLElement, key: XMLElement.Attributes.Key, content: XMLElement.Attributes.Content, type: any Any.Type)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/cannotconvertstringcontent(element:stringcontent:type:)","type":"case","title":"case cannotConvertStringContent(element: XMLElement, stringContent: XMLElement.Content.Element.StringPart, type: any Any.Type)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/missingattribute(element:key:)","type":"case","title":"case missingAttribute(element: XMLElement, key: XMLElement.Attributes.Key)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/missingchild(element:childname:)","type":"case","title":"case missingChild(element: XMLElement, childName: XMLElement.Name)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/missingstringcontent(element:)","type":"case","title":"case missingStringContent(element: XMLElement)"},{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/description","type":"property","title":"var description: String"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/error-implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"type":"symbol","title":"Error Implementations"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror","title":"XMLElement.LookupError","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(xml: XMLElement)","type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/init(xml:)"},{"title":"Type Methods","type":"groupMarker"},{"title":"static func parsedFromXML(Data) throws -> Self","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/parsedfromxml(_:)-42ard"},{"title":"static func parsedFromXML(some StringProtocol) throws -> Self","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/parsedfromxml(_:)-6bn3s"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/expressiblebyxmlelement-implementations","title":"ExpressibleByXMLElement Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/xml","title":"var xml: XMLElement","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/serializeasxml(with:)","title":"func serializeAsXML(with: XMLElement.SerializationOptions) -> String","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/serializeasxmldocument(at:in:with:)","title":"func serializeAsXMLDocument(at: XMLElement.DocumentVersion, in: XMLElement.DocumentEncoding, with: XMLElement.SerializationOptions) -> String","type":"method"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/xmlelementconvertible-implementations","title":"XMLElementConvertible Implementations","type":"symbol"}]},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","title":"XMLAttributeContentRepresentable","path":"\/documentation\/xmlwrangler\/xmlattributecontentrepresentable"},{"type":"typealias","title":"XMLElementRepresentable","path":"\/documentation\/xmlwrangler\/xmlelementrepresentable"},{"type":"typealias","title":"XWElement","path":"\/documentation\/xmlwrangler\/xwelement"},{"type":"groupMarker","title":"Enumerations"},{"type":"enum","title":"XMLContentBuilder","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder","children":[{"title":"Type Methods","type":"groupMarker"},{"title":"static func buildArray(Array<XMLElement.Content>) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildarray(_:)","type":"method"},{"title":"static func buildBlock() -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildblock()","type":"method"},{"title":"static func buildBlock(XMLElement.Content...) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildblock(_:)-1udrp","type":"method"},{"title":"static func buildBlock(XMLElement.Content) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildblock(_:)-3tzma","type":"method"},{"title":"static func buildEither(first: XMLElement.Content) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildeither(first:)","type":"method"},{"title":"static func buildEither(second: XMLElement.Content) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildeither(second:)","type":"method"},{"title":"static func buildExpression(String) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildexpression(_:)-4endp","type":"method"},{"title":"static func buildExpression(XMLElement) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildexpression(_:)-4lv7q","type":"method"},{"title":"static func buildExpression(some XMLElementConvertible) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildexpression(_:)-6pqxb","type":"method"},{"title":"static func buildExpression(XMLElement.Content.Element) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildexpression(_:)-8e32w","type":"method"},{"title":"static func buildFinalResult(XMLElement.Content) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildfinalresult(_:)","type":"method"},{"title":"static func buildOptional(XMLElement.Content?) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildoptional(_:)","type":"method"}]},{"type":"groupMarker","title":"Extended Modules"},{"type":"extension","title":"Swift","path":"\/documentation\/xmlwrangler\/swift","children":[{"type":"groupMarker","title":"Extended Protocols"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"type":"method","title":"func converted<Target>(to: Target.Type) throws -> Array<Target>","path":"\/documentation\/xmlwrangler\/swift\/sequence\/converted(to:)"}],"path":"\/documentation\/xmlwrangler\/swift\/sequence","type":"extension","title":"Sequence"},{"type":"groupMarker","title":"Extended Structures"},{"children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","path":"\/documentation\/xmlwrangler\/swift\/dictionary\/init(elementsof:)","title":"init(elementsOf: XMLElement.Attributes)"}],"path":"\/documentation\/xmlwrangler\/swift\/dictionary","type":"extension","title":"Dictionary"},{"children":[{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","path":"\/documentation\/xmlwrangler\/swift\/string\/expressiblebyxmlattributecontent-implementations","children":[{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/xmlwrangler\/swift\/string\/init(xmlattributecontent:)","type":"init","title":"init(xmlAttributeContent: XMLElement.Attributes.Content)"},{"path":"\/documentation\/xmlwrangler\/swift\/string\/init(xmlattributecontent:)-85b9j","type":"init","title":"init?(xmlAttributeContent: XMLElement.Attributes.Content)"}],"title":"ExpressibleByXMLAttributeContent Implementations"},{"type":"symbol","path":"\/documentation\/xmlwrangler\/swift\/string\/xmlattributecontentconvertible-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var xmlAttributeContent: XMLElement.Attributes.Content","path":"\/documentation\/xmlwrangler\/swift\/string\/xmlattributecontent"}],"title":"XMLAttributeContentConvertible Implementations"}],"path":"\/documentation\/xmlwrangler\/swift\/string","type":"extension","title":"String"}]}],"title":"XMLWrangler","path":"\/documentation\/xmlwrangler","type":"module"}]}]},"includedArchiveIdentifiers":["XMLWrangler"],"schemaVersion":{"major":0,"minor":1,"patch":2}}