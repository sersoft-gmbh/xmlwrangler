{"interfaceLanguages":{"swift":[{"type":"module","title":"Documentation","path":"\/documentation","children":[{"path":"\/documentation\/xmlwrangler","type":"module","title":"XMLWrangler","children":[{"type":"groupMarker","title":"Protocols"},{"type":"protocol","path":"\/documentation\/xmlwrangler\/expressiblebyxmlattributecontent","children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"title":"init?(xmlAttributeContent: XMLElement.Attributes.Content)","type":"init","path":"\/documentation\/xmlwrangler\/expressiblebyxmlattributecontent\/init(xmlattributecontent:)-94r05"},{"title":"init?(xmlAttributeContent: XMLElement.Attributes.Content)","type":"init","path":"\/documentation\/xmlwrangler\/expressiblebyxmlattributecontent\/init(xmlattributecontent:)-3j6bp"},{"title":"init?(xmlAttributeContent: XMLElement.Attributes.Content)","type":"init","path":"\/documentation\/xmlwrangler\/expressiblebyxmlattributecontent\/init(xmlattributecontent:)-57hl"}],"type":"groupMarker","title":"ExpressibleByXMLAttributeContent Implementations"}],"title":"init?(xmlAttributeContent: XMLElement.Attributes.Content)","path":"\/documentation\/xmlwrangler\/expressiblebyxmlattributecontent\/init(xmlattributecontent:)","type":"init"}],"title":"ExpressibleByXMLAttributeContent"},{"type":"protocol","path":"\/documentation\/xmlwrangler\/expressiblebyxmlelement","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init(xml: XMLElement) throws","path":"\/documentation\/xmlwrangler\/expressiblebyxmlelement\/init(xml:)","children":[{"title":"ExpressibleByXMLElement Implementations","children":[{"type":"init","title":"init(xml: XMLElement) throws","path":"\/documentation\/xmlwrangler\/expressiblebyxmlelement\/init(xml:)-3wu3r"},{"type":"init","title":"init(xml: XMLElement) throws","path":"\/documentation\/xmlwrangler\/expressiblebyxmlelement\/init(xml:)-76pd1"},{"type":"init","title":"init(xml: XMLElement) throws","path":"\/documentation\/xmlwrangler\/expressiblebyxmlelement\/init(xml:)-9t88v"}],"type":"groupMarker"}]},{"type":"groupMarker","title":"Type Methods"},{"type":"method","title":"static func parsedFromXML(some StringProtocol) throws -> Self","path":"\/documentation\/xmlwrangler\/expressiblebyxmlelement\/parsedfromxml(_:)-3qdph"},{"type":"method","title":"static func parsedFromXML(Data) throws -> Self","path":"\/documentation\/xmlwrangler\/expressiblebyxmlelement\/parsedfromxml(_:)-x5w6"}],"title":"ExpressibleByXMLElement"},{"type":"protocol","path":"\/documentation\/xmlwrangler\/xmlattributecontentconvertible","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","children":[{"children":[{"path":"\/documentation\/xmlwrangler\/xmlattributecontentconvertible\/xmlattributecontent-40rww","type":"property","title":"var xmlAttributeContent: XMLElement.Attributes.Content"}],"title":"XMLAttributeContentConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/xmlwrangler\/xmlattributecontentconvertible\/xmlattributecontent","title":"var xmlAttributeContent: XMLElement.Attributes.Content"}],"title":"XMLAttributeContentConvertible"},{"type":"protocol","path":"\/documentation\/xmlwrangler\/xmlelementconvertible","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelementconvertible\/xml","type":"property","title":"var xml: XMLElement"},{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/xmlwrangler\/xmlelementconvertible\/serializeasxml(with:)","type":"method","title":"func serializeAsXML(with: XMLElement.SerializationOptions) -> String"},{"path":"\/documentation\/xmlwrangler\/xmlelementconvertible\/serializeasxmldocument(at:in:with:)","type":"method","title":"func serializeAsXMLDocument(at: XMLElement.DocumentVersion, in: XMLElement.DocumentEncoding, with: XMLElement.SerializationOptions) -> String"}],"title":"XMLElementConvertible"},{"type":"groupMarker","title":"Structures"},{"type":"struct","path":"\/documentation\/xmlwrangler\/xmlelement","children":[{"type":"groupMarker","title":"Structures"},{"type":"struct","title":"XMLElement.Attributes","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct","children":[{"type":"groupMarker","title":"Structures"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init(XMLElement.Attributes.Content.RawValue)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/init(_:)"},{"type":"init","title":"init(rawValue: XMLElement.Attributes.Content.RawValue)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/init(rawvalue:)"},{"type":"init","title":"init(stringLiteral: XMLElement.Attributes.Content.StringLiteralType)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/init(stringliteral:)"},{"type":"init","title":"init(xmlAttributeContent: XMLElement.Attributes.Content)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/init(xmlattributecontent:)"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var debugDescription: String","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/debugdescription"},{"type":"property","title":"var description: String","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/description"},{"type":"property","title":"let rawValue: XMLElement.Attributes.Content.RawValue","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/rawvalue-swift.property"},{"type":"property","title":"var xmlAttributeContent: XMLElement.Attributes.Content","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/xmlattributecontent"},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","title":"XMLElement.Attributes.Content.RawValue","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/rawvalue-swift.typealias"},{"type":"typealias","title":"XMLElement.Attributes.Content.StringLiteralType","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/stringliteraltype"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"title":"Equatable Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/equatable-implementations"},{"type":"symbol","children":[{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/init(unicodescalarliteral:)","type":"init","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)"}],"title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/expressiblebyextendedgraphemeclusterliteral-implementations"},{"type":"symbol","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/init(stringinterpolation:)","title":"init(stringInterpolation: DefaultStringInterpolation)"}],"title":"ExpressibleByStringInterpolation Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/expressiblebystringinterpolation-implementations"},{"type":"symbol","children":[{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/init(extendedgraphemeclusterliteral:)","type":"init","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)"}],"title":"ExpressibleByStringLiteral Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/expressiblebystringliteral-implementations"},{"type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"title":"RawRepresentable Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/content\/rawrepresentable-implementations"}],"type":"struct","title":"XMLElement.Attributes.Content"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct","children":[{"type":"groupMarker","title":"Structures"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/iterator","children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/iterator\/next()","title":"func next() -> XMLElement.Attributes.Contents.Element?","type":"method"}],"type":"struct","title":"XMLElement.Attributes.Contents.Iterator"},{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/debugdescription","type":"property","title":"var debugDescription: String"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/description","type":"property","title":"var description: String"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/endindex","type":"property","title":"var endIndex: XMLElement.Attributes.Contents.Index"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/startindex","type":"property","title":"var startIndex: XMLElement.Attributes.Contents.Index"},{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/index(after:)","type":"method","title":"func index(after: XMLElement.Attributes.Contents.Index) -> XMLElement.Attributes.Contents.Index"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/makeiterator()","type":"method","title":"func makeIterator() -> XMLElement.Attributes.Contents.Iterator"},{"type":"groupMarker","title":"Subscripts"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/subscript(_:)","type":"subscript","title":"subscript(XMLElement.Attributes.Contents.Index) -> XMLElement.Attributes.Contents.Element"},{"type":"groupMarker","title":"Type Aliases"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/element","type":"typealias","title":"XMLElement.Attributes.Contents.Element"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/index","type":"typealias","title":"XMLElement.Attributes.Contents.Index"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/collection-implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var count: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/count","type":"property"},{"title":"var first: Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/first","type":"property"},{"title":"var indices: DefaultIndices<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/indices","type":"property"},{"title":"var isEmpty: Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/isempty","type":"property"},{"title":"var underestimatedCount: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/underestimatedcount","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func distance(from: Self.Index, to: Self.Index) -> Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/distance(from:to:)","type":"method"},{"title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/drop(while:)","type":"method"},{"title":"func dropFirst(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/dropfirst(_:)","type":"method"},{"title":"func dropLast(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/droplast(_:)","type":"method"},{"title":"func firstIndex(of: Self.Element) -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/firstindex(of:)","type":"method"},{"title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/firstindex(where:)","type":"method"},{"title":"func firstRange<C>(of: C) -> Range<Self.Index>?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/firstrange(of:)","type":"method"},{"title":"func formIndex(inout Self.Index, offsetBy: Int)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/formindex(_:offsetby:)","type":"method"},{"title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/formindex(_:offsetby:limitedby:)","type":"method"},{"title":"func formIndex(after: inout Self.Index)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/formindex(after:)","type":"method"},{"title":"func index(Self.Index, offsetBy: Int) -> Self.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/index(_:offsetby:)","type":"method"},{"title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/index(_:offsetby:limitedby:)","type":"method"},{"title":"func index(of: Self.Element) -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/index(of:)","deprecated":true,"type":"method"},{"title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/indices(of:)","type":"method"},{"title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/indices(where:)","type":"method"},{"title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/map(_:)-7jjd1","type":"method"},{"title":"func prefix(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/prefix(_:)","type":"method"},{"title":"func prefix(through: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/prefix(through:)","type":"method"},{"title":"func prefix(upTo: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/prefix(upto:)","type":"method"},{"title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/prefix(while:)","type":"method"},{"title":"func randomElement() -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/randomelement()","type":"method"},{"title":"func randomElement<T>(using: inout T) -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/randomelement(using:)","type":"method"},{"title":"func ranges<C>(of: C) -> [Range<Self.Index>]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/ranges(of:)","type":"method"},{"title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/removingsubranges(_:)","type":"method"},{"title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","type":"method"},{"title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)","type":"method"},{"title":"func suffix(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/suffix(_:)","type":"method"},{"title":"func suffix(from: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/suffix(from:)","type":"method"},{"title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/trimmingprefix(_:)","type":"method"},{"title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/trimmingprefix(while:)","type":"method"}],"type":"symbol","title":"Collection Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/mutablecollection-implementations","children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/movesubranges(_:to:)","title":"func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/partition(by:)","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"type":"symbol","title":"MutableCollection Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/sequence-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/lazy","type":"property","title":"var lazy: LazySequence<Self>"},{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/allsatisfy(_:)","type":"method","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/compactmap(_:)","type":"method","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/compare(_:_:)","type":"method","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/contains(_:)","type":"method","title":"func contains(Self.Element) -> Bool"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/contains(where:)","type":"method","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/count(where:)","type":"method","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/elementsequal(_:)","type":"method","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/elementsequal(_:by:)","type":"method","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/enumerated()","type":"method","title":"func enumerated() -> EnumeratedSequence<Self>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/filter(_:)-9bsqn","type":"method","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/filter(_:)-k6y9","type":"method","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/first(where:)","type":"method","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/flatmap(_:)-2an33","type":"method","deprecated":true,"title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/flatmap(_:)-3xzxn","type":"method","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/foreach(_:)","type":"method","title":"func forEach((Self.Element) throws -> Void) rethrows"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/formatted(_:)","type":"method","title":"func formatted<S>(S) -> S.FormatOutput"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/lexicographicallyprecedes(_:by:)","type":"method","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/map(_:)-96tnu","type":"method","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/max(by:)","type":"method","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/min(by:)","type":"method","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/reduce(_:_:)","type":"method","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/reduce(into:_:)","type":"method","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/reversed()","type":"method","title":"func reversed() -> [Self.Element]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/shuffled()","type":"method","title":"func shuffled() -> [Self.Element]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/shuffled(using:)","type":"method","title":"func shuffled<T>(using: inout T) -> [Self.Element]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/sorted(by:)","type":"method","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/sorted(using:)-1xbyf","type":"method","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/sorted(using:)-2s7ct","type":"method","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/starts(with:)","type":"method","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/starts(with:by:)","type":"method","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.struct\/withcontiguousstorageifavailable(_:)","type":"method","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?"}],"type":"symbol","title":"Sequence Implementations"}],"type":"struct","title":"XMLElement.Attributes.Contents"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key","children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/init(_:)","title":"init(XMLElement.Attributes.Key.RawValue)","type":"init"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/init(rawvalue:)","title":"init(rawValue: XMLElement.Attributes.Key.RawValue)","type":"init"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/init(stringliteral:)","title":"init(stringLiteral: XMLElement.Attributes.Key.StringLiteralType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/rawvalue-swift.property","title":"let rawValue: XMLElement.Attributes.Key.RawValue","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/rawvalue-swift.typealias","title":"XMLElement.Attributes.Key.RawValue","type":"typealias"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/stringliteraltype","title":"XMLElement.Attributes.Key.StringLiteralType","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/equatable-implementations","title":"Equatable Implementations","type":"symbol","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","type":"op","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/!=(_:_:)"}]},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/init(unicodescalarliteral:)","type":"init"}]},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/init(extendedgraphemeclusterliteral:)"}]},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol","children":[{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/init(from:)","type":"init","title":"init(from: any Decoder) throws"},{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/hashvalue","type":"property","title":"var hashValue: Int"},{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/encode(to:)","type":"method","title":"func encode(to: any Encoder) throws"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/key\/hash(into:)","type":"method","title":"func hash(into: inout Hasher)"}]}],"type":"struct","title":"XMLElement.Attributes.Key"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct","children":[{"title":"Structures","type":"groupMarker"},{"title":"XMLElement.Attributes.Keys.Iterator","type":"struct","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/iterator","children":[{"title":"Instance Methods","type":"groupMarker"},{"title":"func next() -> XMLElement.Attributes.Keys.Element?","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/iterator\/next()"}]},{"title":"Instance Properties","type":"groupMarker"},{"title":"var debugDescription: String","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/debugdescription"},{"title":"var description: String","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/description"},{"title":"var endIndex: XMLElement.Attributes.Keys.Index","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/endindex"},{"title":"var startIndex: XMLElement.Attributes.Keys.Index","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/startindex"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func index(after: XMLElement.Attributes.Keys.Index) -> XMLElement.Attributes.Keys.Index","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/index(after:)"},{"title":"func makeIterator() -> XMLElement.Attributes.Keys.Iterator","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/makeiterator()"},{"title":"Subscripts","type":"groupMarker"},{"title":"subscript(XMLElement.Attributes.Keys.Index) -> XMLElement.Attributes.Keys.Element","type":"subscript","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/subscript(_:)"},{"title":"Type Aliases","type":"groupMarker"},{"title":"XMLElement.Attributes.Keys.Element","type":"typealias","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/element"},{"title":"XMLElement.Attributes.Keys.Index","type":"typealias","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/index"},{"title":"Default Implementations","type":"groupMarker"},{"title":"Collection Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/collection-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var count: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/count"},{"type":"property","title":"var first: Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/first"},{"type":"property","title":"var indices: DefaultIndices<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/indices"},{"type":"property","title":"var isEmpty: Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/isempty"},{"type":"property","title":"var underestimatedCount: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/underestimatedcount"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func distance(from: Self.Index, to: Self.Index) -> Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/distance(from:to:)"},{"type":"method","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/drop(while:)"},{"type":"method","title":"func dropFirst(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/dropfirst(_:)"},{"type":"method","title":"func dropLast(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/droplast(_:)"},{"type":"method","title":"func firstIndex(of: Self.Element) -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/firstindex(of:)"},{"type":"method","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/firstindex(where:)"},{"type":"method","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/firstrange(of:)"},{"type":"method","title":"func formIndex(inout Self.Index, offsetBy: Int)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/formindex(_:offsetby:)"},{"type":"method","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/formindex(_:offsetby:limitedby:)"},{"type":"method","title":"func formIndex(after: inout Self.Index)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/formindex(after:)"},{"type":"method","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/index(_:offsetby:)"},{"type":"method","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/index(_:offsetby:limitedby:)"},{"type":"method","title":"func index(of: Self.Element) -> Self.Index?","deprecated":true,"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/index(of:)"},{"type":"method","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/indices(of:)"},{"type":"method","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/indices(where:)"},{"type":"method","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/map(_:)-5a30m"},{"type":"method","title":"func prefix(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/prefix(_:)"},{"type":"method","title":"func prefix(through: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/prefix(through:)"},{"type":"method","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/prefix(upto:)"},{"type":"method","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/prefix(while:)"},{"type":"method","title":"func randomElement() -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/randomelement()"},{"type":"method","title":"func randomElement<T>(using: inout T) -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/randomelement(using:)"},{"type":"method","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/ranges(of:)"},{"type":"method","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/removingsubranges(_:)"},{"type":"method","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)"},{"type":"method","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)"},{"type":"method","title":"func suffix(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/suffix(_:)"},{"type":"method","title":"func suffix(from: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/suffix(from:)"},{"type":"method","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/trimmingprefix(_:)"},{"type":"method","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/trimmingprefix(while:)"}]},{"title":"Equatable Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/equatable-implementations","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","title":"static func != (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/!=(_:_:)"}]},{"title":"Sequence Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/sequence-implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var lazy: LazySequence<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/lazy","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/allsatisfy(_:)","type":"method"},{"title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/compactmap(_:)","type":"method"},{"title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/compare(_:_:)","type":"method"},{"title":"func contains(Self.Element) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/contains(_:)","type":"method"},{"title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/contains(where:)","type":"method"},{"title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/count(where:)","type":"method"},{"title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/elementsequal(_:)","type":"method"},{"title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/elementsequal(_:by:)","type":"method"},{"title":"func enumerated() -> EnumeratedSequence<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/enumerated()","type":"method"},{"title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/filter(_:)-4x5zv","type":"method"},{"title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/filter(_:)-6vxqu","type":"method"},{"title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/first(where:)","type":"method"},{"deprecated":true,"title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/flatmap(_:)-124gs","type":"method"},{"title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/flatmap(_:)-5tdij","type":"method"},{"title":"func forEach((Self.Element) throws -> Void) rethrows","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/foreach(_:)","type":"method"},{"title":"func formatted<S>(S) -> S.FormatOutput","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/formatted(_:)","type":"method"},{"title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/lexicographicallyprecedes(_:by:)","type":"method"},{"title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/map(_:)-5alsh","type":"method"},{"title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/max(by:)","type":"method"},{"title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/min(by:)","type":"method"},{"title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/reduce(_:_:)","type":"method"},{"title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/reduce(into:_:)","type":"method"},{"title":"func reversed() -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/reversed()","type":"method"},{"title":"func shuffled() -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/shuffled()","type":"method"},{"title":"func shuffled<T>(using: inout T) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/shuffled(using:)","type":"method"},{"title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/sorted(by:)","type":"method"},{"title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/sorted(using:)-4n9k","type":"method"},{"title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/sorted(using:)-4yn7j","type":"method"},{"title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/starts(with:)","type":"method"},{"title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/starts(with:by:)","type":"method"},{"title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.struct\/withcontiguousstorageifavailable(_:)","type":"method"}]}],"type":"struct","title":"XMLElement.Attributes.Keys"},{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/init()","type":"init","title":"init()"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/init(_:uniquingkeyswith:)","type":"init","title":"init(some Sequence<(XMLElement.Attributes.Key, XMLElement.Attributes.Content)>, uniquingKeysWith: (XMLElement.Attributes.Content, XMLElement.Attributes.Content) throws -> XMLElement.Attributes.Content) rethrows"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/init(minimumcapacity:)","type":"init","title":"init(minimumCapacity: Int)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/init(uniquekeyswithcontents:)","type":"init","title":"init(uniqueKeysWithContents: some Sequence<(XMLElement.Attributes.Key, XMLElement.Attributes.Content)>)"},{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contents-swift.property","type":"property","title":"var contents: XMLElement.Attributes.Contents"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/keys-swift.property","type":"property","title":"var keys: XMLElement.Attributes.Keys"},{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/filter(_:)","type":"method","title":"func filter((XMLElement.Attributes.Element) throws -> Bool) rethrows -> XMLElement.Attributes"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/merge(_:uniquingkeyswith:)-134z7","type":"method","title":"func merge(XMLElement.Attributes, uniquingKeysWith: (XMLElement.Attributes.Content, XMLElement.Attributes.Content) throws -> XMLElement.Attributes.Content) rethrows"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/merge(_:uniquingkeyswith:)-2dkp4","type":"method","title":"func merge(some Sequence<(XMLElement.Attributes.Key, XMLElement.Attributes.Content)>, uniquingKeysWith: (XMLElement.Attributes.Content, XMLElement.Attributes.Content) throws -> XMLElement.Attributes.Content) rethrows"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/merging(_:uniquingkeyswith:)-37s76","type":"method","title":"func merging(XMLElement.Attributes, uniquingKeysWith: (XMLElement.Attributes.Content, XMLElement.Attributes.Content) throws -> XMLElement.Attributes.Content) rethrows -> XMLElement.Attributes"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/merging(_:uniquingkeyswith:)-7rko5","type":"method","title":"func merging(some Sequence<(XMLElement.Attributes.Key, XMLElement.Attributes.Content)>, uniquingKeysWith: (XMLElement.Attributes.Content, XMLElement.Attributes.Content) throws -> XMLElement.Attributes.Content) rethrows -> XMLElement.Attributes"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/removeall(keepingcapacity:)","type":"method","title":"func removeAll(keepingCapacity: Bool)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/removecontent(forkey:)","type":"method","title":"func removeContent(forKey: XMLElement.Attributes.Key) -> XMLElement.Attributes.Content?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/updatecontent(_:forkey:)","type":"method","title":"func updateContent(XMLElement.Attributes.Content, forKey: XMLElement.Attributes.Key) -> XMLElement.Attributes.Content?"},{"type":"groupMarker","title":"Subscripts"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/subscript(_:)-1v9n0","type":"subscript","title":"subscript(XMLElement.Attributes.Key) -> XMLElement.Attributes.Content?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/subscript(_:default:)","type":"subscript","title":"subscript(XMLElement.Attributes.Key, default _: @autoclosure () -> some XMLAttributeContentConvertible) -> XMLElement.Attributes.Content"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/collection-implementations","children":[{"type":"groupMarker","title":"Structures"},{"type":"struct","title":"XMLElement.Attributes.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index","children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/_(_:_:)","type":"op","title":"static func < (XMLElement.Attributes.Index, XMLElement.Attributes.Index) -> Bool"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/comparable-implementations","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func ... (Self) -> PartialRangeFrom<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/'...(_:)-ipkd","type":"op"},{"title":"static func ... (Self) -> PartialRangeThrough<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/'...(_:)-vdf4","type":"op"},{"title":"static func ... (Self, Self) -> ClosedRange<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/'...(_:_:)","type":"op"},{"title":"static func ..< (Self) -> PartialRangeUpTo<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/'.._(_:)","type":"op"},{"title":"static func ..< (Self, Self) -> Range<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/'.._(_:_:)","type":"op"},{"title":"static func > (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/_(_:_:)-6ycbk","type":"op"},{"title":"static func >= (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/_=(_:_:)-5oumv","type":"op"},{"title":"static func <= (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/_=(_:_:)-9ekje","type":"op"}],"type":"symbol","title":"Comparable Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/equatable-implementations","children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"type":"symbol","title":"Equatable Implementations"}]},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var count: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/count"},{"type":"property","title":"var endIndex: XMLElement.Attributes.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/endindex"},{"type":"property","title":"var first: Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/first"},{"type":"property","title":"var indices: DefaultIndices<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/indices"},{"type":"property","title":"var isEmpty: Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/isempty"},{"type":"property","title":"var startIndex: XMLElement.Attributes.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/startindex"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func distance(from: Self.Index, to: Self.Index) -> Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/distance(from:to:)"},{"type":"method","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/drop(while:)"},{"type":"method","title":"func dropFirst(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/dropfirst(_:)"},{"type":"method","title":"func dropLast(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/droplast(_:)"},{"type":"method","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/firstindex(where:)"},{"type":"method","title":"func formIndex(inout Self.Index, offsetBy: Int)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/formindex(_:offsetby:)"},{"type":"method","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/formindex(_:offsetby:limitedby:)"},{"type":"method","title":"func formIndex(after: inout Self.Index)","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/formindex(after:)"},{"type":"method","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index(_:offsetby:)"},{"type":"method","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index(_:offsetby:limitedby:)"},{"type":"method","title":"func index(after: XMLElement.Attributes.Index) -> XMLElement.Attributes.Index","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/index(after:)"},{"type":"method","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/indices(where:)"},{"type":"method","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/map(_:)-9xj4p"},{"type":"method","title":"func prefix(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/prefix(_:)"},{"type":"method","title":"func prefix(through: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/prefix(through:)"},{"type":"method","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/prefix(upto:)"},{"type":"method","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/prefix(while:)"},{"type":"method","title":"func randomElement() -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/randomelement()"},{"type":"method","title":"func randomElement<T>(using: inout T) -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/randomelement(using:)"},{"type":"method","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/removingsubranges(_:)"},{"type":"method","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)"},{"type":"method","title":"func suffix(Int) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/suffix(_:)"},{"type":"method","title":"func suffix(from: Self.Index) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/suffix(from:)"},{"type":"method","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/trimmingprefix(while:)"},{"type":"groupMarker","title":"Subscripts"},{"type":"subscript","title":"subscript(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/subscript(_:)-7zahb"},{"type":"subscript","title":"subscript<R>(R) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/subscript(_:)-8ysl2"},{"type":"subscript","title":"subscript(Range<Self.Index>) -> Slice<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/subscript(_:)-92e75"},{"type":"subscript","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/subscript(_:)-9hwxq"},{"type":"subscript","title":"subscript(XMLElement.Attributes.Index) -> XMLElement.Attributes.Element","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/subscript(_:)-gq1a"}],"type":"symbol","title":"Collection Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/customdebugstringconvertible-implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","title":"var debugDescription: String","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/debugdescription"}],"type":"symbol","title":"CustomDebugStringConvertible Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/customstringconvertible-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/description","type":"property","title":"var description: String"}],"type":"symbol","title":"CustomStringConvertible Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/equatable-implementations","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool"}],"type":"symbol","title":"Equatable Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/expressiblebydictionaryliteral-implementations","children":[{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/init(dictionaryliteral:)","type":"init","title":"init(dictionaryLiteral: (XMLElement.Attributes.Key, any XMLAttributeContentConvertible)...)"}],"type":"symbol","title":"ExpressibleByDictionaryLiteral Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/sequence-implementations","children":[{"title":"Structures","type":"groupMarker"},{"type":"struct","children":[{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func next() -> XMLElement.Attributes.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/iterator\/next()"}],"title":"XMLElement.Attributes.Iterator","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/iterator"},{"title":"Instance Properties","type":"groupMarker"},{"type":"property","title":"var lazy: LazySequence<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/lazy"},{"type":"property","title":"var underestimatedCount: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/underestimatedcount"},{"title":"Instance Methods","type":"groupMarker"},{"type":"method","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/allsatisfy(_:)"},{"type":"method","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/compactmap(_:)"},{"type":"method","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/compare(_:_:)"},{"type":"method","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/contains(where:)"},{"type":"method","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/count(where:)"},{"type":"method","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/elementsequal(_:by:)"},{"type":"method","title":"func enumerated() -> EnumeratedSequence<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/enumerated()"},{"type":"method","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/first(where:)"},{"type":"method","deprecated":true,"title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/flatmap(_:)-4yo6e"},{"type":"method","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/flatmap(_:)-8fhwg"},{"type":"method","title":"func forEach((Self.Element) throws -> Void) rethrows","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/foreach(_:)"},{"type":"method","title":"func formatted<S>(S) -> S.FormatOutput","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/formatted(_:)"},{"type":"method","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/lexicographicallyprecedes(_:by:)"},{"type":"method","title":"func makeIterator() -> XMLElement.Attributes.Iterator","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/makeiterator()"},{"type":"method","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/map(_:)-5hcvs"},{"type":"method","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/max(by:)"},{"type":"method","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/min(by:)"},{"type":"method","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/reduce(_:_:)"},{"type":"method","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/reduce(into:_:)"},{"type":"method","title":"func reversed() -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/reversed()"},{"type":"method","title":"func shuffled() -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/shuffled()"},{"type":"method","title":"func shuffled<T>(using: inout T) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/shuffled(using:)"},{"type":"method","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/sorted(by:)"},{"type":"method","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/sorted(using:)-5swdy"},{"type":"method","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/sorted(using:)-8mh3v"},{"type":"method","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/starts(with:by:)"},{"type":"method","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/withcontiguousstorageifavailable(_:)"},{"title":"Type Aliases","type":"groupMarker"},{"type":"typealias","title":"XMLElement.Attributes.Element","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.struct\/element"}],"type":"symbol","title":"Sequence Implementations"}]},{"type":"struct","title":"XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init()","type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init()"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var allElements: some Collection<XMLElement>","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/allelements"},{"title":"var allStrings: some Collection<String>","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/allstrings"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func append(contentsOf: some Sequence<XMLElement>)","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/append(contentsof:)"},{"title":"func append(elementOf: some XMLElementConvertible)","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/append(elementof:)"},{"title":"func appendElement(XMLElement)","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/appendelement(_:)"},{"title":"func appendElements(XMLElement...)","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/appendelements(_:)"},{"title":"func appendString(XMLElement.Content.Element.StringPart)","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/appendstring(_:)"},{"title":"func compress()","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/compress()"},{"title":"func compressed() -> XMLElement.Content","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/compressed()"},{"title":"func find(elementsNamed: XMLElement.Name, recursive: Bool) -> Array<XMLElement>","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/find(elementsnamed:recursive:)"},{"title":"func findFirst(elementNamed: XMLElement.Name, recursive: Bool) -> XMLElement?","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/findfirst(elementnamed:recursive:)"},{"title":"func findLast(elementNamed: XMLElement.Name, recursive: Bool) -> XMLElement?","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/findlast(elementnamed:recursive:)"},{"title":"func serialize(with: XMLElement.SerializationOptions) -> String","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/serialize(with:)"},{"title":"Enumerations","type":"groupMarker"},{"title":"XMLElement.Content.Element","type":"enum","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element","children":[{"type":"groupMarker","title":"Enumeration Cases"},{"type":"case","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/element(_:)","title":"case element(XMLElement)"},{"type":"case","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/string(_:)","title":"case string(XMLElement.Content.Element.StringPart)"},{"type":"groupMarker","title":"Initializers"},{"type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/init(stringliteral:)","title":"init(stringLiteral: XMLElement.Content.Element.StringLiteralType)"},{"type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/init(xml:)","title":"init(xml: XMLElement)"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/debugdescription","title":"var debugDescription: String"},{"type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/description","title":"var description: String"},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/stringliteraltype","title":"XMLElement.Content.Element.StringLiteralType"},{"type":"typealias","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/stringpart","title":"XMLElement.Content.Element.StringPart"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/equatable-implementations","title":"Equatable Implementations","children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}]},{"type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}]},{"type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init(stringInterpolation: DefaultStringInterpolation)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/init(stringinterpolation:)"}]},{"type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","children":[{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/init(extendedgraphemeclusterliteral:)","type":"init","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)"}]},{"type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/expressiblebyxmlelement-implementations","title":"ExpressibleByXMLElement Implementations","children":[{"type":"groupMarker","title":"Type Methods"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/parsedfromxml(_:)-55x14","title":"static func parsedFromXML(some StringProtocol) throws -> Self"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/element\/parsedfromxml(_:)-5mwm6","title":"static func parsedFromXML(Data) throws -> Self"}]}]},{"title":"Default Implementations","type":"groupMarker"},{"title":"BidirectionalCollection Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/bidirectionalcollection-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/last","type":"property","title":"var last: Self.Element?"},{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/difference(from:)","type":"method","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/difference(from:by:)","type":"method","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/droplast(_:)","type":"method","title":"func dropLast(Int) -> Self.SubSequence"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/formindex(before:)","type":"method","title":"func formIndex(before: inout Self.Index)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/index(before:)","type":"method","title":"func index(before: XMLElement.Content.Index) -> XMLElement.Content.Index"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/last(where:)","type":"method","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/lastindex(of:)","type":"method","title":"func lastIndex(of: Self.Element) -> Self.Index?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/lastindex(where:)","type":"method","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/reversed()","type":"method","title":"func reversed() -> ReversedCollection<Self>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/suffix(_:)","type":"method","title":"func suffix(Int) -> Self.SubSequence"}]},{"title":"Collection Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/collection-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/count","type":"property","title":"var count: Int"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/endindex","type":"property","title":"var endIndex: XMLElement.Content.Index"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/first","type":"property","title":"var first: Self.Element?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/indices-swift.property","type":"property","title":"var indices: DefaultIndices<Self>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/isempty","type":"property","title":"var isEmpty: Bool"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/startindex","type":"property","title":"var startIndex: XMLElement.Content.Index"},{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/distance(from:to:)","type":"method","title":"func distance(from: XMLElement.Content.Index, to: XMLElement.Content.Index) -> Int"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/drop(while:)","type":"method","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/dropfirst(_:)","type":"method","title":"func dropFirst(Int) -> Self.SubSequence"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/firstindex(of:)","type":"method","title":"func firstIndex(of: Self.Element) -> Self.Index?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/firstindex(where:)","type":"method","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/firstrange(of:)","type":"method","title":"func firstRange<C>(of: C) -> Range<Self.Index>?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/formindex(_:offsetby:)","type":"method","title":"func formIndex(inout Self.Index, offsetBy: Int)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/formindex(_:offsetby:limitedby:)","type":"method","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/formindex(after:)","type":"method","title":"func formIndex(after: inout Self.Index)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/index(_:offsetby:)","type":"method","title":"func index(XMLElement.Content.Index, offsetBy: Int) -> XMLElement.Content.Index"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/index(after:)","type":"method","title":"func index(after: XMLElement.Content.Index) -> XMLElement.Content.Index"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/index(of:)","type":"method","title":"func index(of: Self.Element) -> Self.Index?","deprecated":true},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/indices(of:)","type":"method","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/indices(where:)","type":"method","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/makeiterator()","type":"method","title":"func makeIterator() -> IndexingIterator<Self>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/map(_:)-7mehe","type":"method","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/prefix(_:)","type":"method","title":"func prefix(Int) -> Self.SubSequence"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/prefix(through:)","type":"method","title":"func prefix(through: Self.Index) -> Self.SubSequence"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/prefix(upto:)","type":"method","title":"func prefix(upTo: Self.Index) -> Self.SubSequence"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/prefix(while:)","type":"method","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/randomelement()","type":"method","title":"func randomElement() -> Self.Element?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/randomelement(using:)","type":"method","title":"func randomElement<T>(using: inout T) -> Self.Element?"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/ranges(of:)","type":"method","title":"func ranges<C>(of: C) -> [Range<Self.Index>]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removingsubranges(_:)","type":"method","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","type":"method","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)","type":"method","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/suffix(from:)","type":"method","title":"func suffix(from: Self.Index) -> Self.SubSequence"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/trimmingprefix(_:)","type":"method","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/trimmingprefix(while:)","type":"method","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence"},{"type":"groupMarker","title":"Subscripts"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/subscript(_:)","type":"subscript","title":"subscript(XMLElement.Content.Index) -> XMLElement.Content.Element"},{"type":"groupMarker","title":"Type Aliases"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/index","type":"typealias","title":"XMLElement.Content.Index"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/indices","type":"typealias","title":"XMLElement.Content.Indices"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/subsequence","type":"typealias","title":"XMLElement.Content.SubSequence"}]},{"title":"CustomDebugStringConvertible Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/customdebugstringconvertible-implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var debugDescription: String","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/debugdescription"}]},{"title":"CustomStringConvertible Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/customstringconvertible-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var description: String","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/description"}]},{"title":"Equatable Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/equatable-implementations","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","title":"static func != (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/!=(_:_:)"}]},{"title":"ExpressibleByArrayLiteral Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/expressiblebyarrayliteral-implementations","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(arrayLiteral: XMLElement.Content.ArrayLiteralElement...)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(arrayliteral:)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"title":"XMLElement.Content.ArrayLiteralElement","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/arrayliteralelement","type":"typealias"}]},{"title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/expressiblebyextendedgraphemeclusterliteral-implementations","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(unicodescalarliteral:)"}]},{"title":"ExpressibleByStringInterpolation Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/expressiblebystringinterpolation-implementations","children":[{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation","title":"XMLElement.Content.StringInterpolation","type":"struct","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/init(literalcapacity:interpolationcount:)","title":"init(literalCapacity: Int, interpolationCount: Int)"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/appendinterpolation(_:)-46jy","title":"func appendInterpolation(some XMLElementConvertible)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/appendinterpolation(_:)-4zdk6","title":"func appendInterpolation(XMLElement.Content.Element...)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/appendinterpolation(_:)-7v6zj","title":"func appendInterpolation(XMLElement.Content)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/appendinterpolation(_:)-7xhft","title":"func appendInterpolation(some StringProtocol)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/appendinterpolation(_:)-q0o5","title":"func appendInterpolation(some Sequence<XMLElement.Content.Element>)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/appendinterpolation(contentof:)","title":"func appendInterpolation(contentOf: XMLElement)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/appendliteral(_:)","title":"func appendLiteral(XMLElement.Content.StringInterpolation.StringLiteralType)"},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringinterpolation\/stringliteraltype","title":"XMLElement.Content.StringInterpolation.StringLiteralType"}]},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(stringinterpolation:)","title":"init(stringInterpolation: XMLElement.Content.StringInterpolation)","type":"init"}]},{"title":"ExpressibleByStringLiteral Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/expressiblebystringliteral-implementations","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(extendedgraphemeclusterliteral:)"},{"type":"init","title":"init(stringLiteral: XMLElement.Content.StringLiteralType)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(stringliteral:)"},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","title":"XMLElement.Content.StringLiteralType","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/stringliteraltype"}]},{"title":"ExpressibleByXMLElement Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/expressiblebyxmlelement-implementations","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(xml: XMLElement)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(xml:)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"title":"static func parsedFromXML(Data) throws -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/parsedfromxml(_:)-5p21z","type":"method"},{"title":"static func parsedFromXML(some StringProtocol) throws -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/parsedfromxml(_:)-8ka0o","type":"method"}]},{"title":"MutableCollection Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/mutablecollection-implementations","children":[{"type":"groupMarker","title":"Instance Methods"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/movesubranges(_:to:)","title":"func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/partition(by:)-22mry","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/partition(by:)-6omqc","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removesubranges(_:)-5a3zm","title":"func removeSubranges(RangeSet<Self.Index>)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/reverse()","title":"func reverse()"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/shuffle()","title":"func shuffle()"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/shuffle(using:)","title":"func shuffle<T>(using: inout T)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/sort(using:)-1zdlr","title":"func sort<Comparator>(using: Comparator)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/sort(using:)-82hoj","title":"func sort<S, Comparator>(using: S)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?"}]},{"title":"RandomAccessCollection Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/randomaccesscollection-implementations","children":[{"title":"Instance Methods","type":"groupMarker"},{"title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/index(_:offsetby:limitedby:)"}]},{"title":"RangeReplaceableCollection Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/rangereplaceablecollection-implementations","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","title":"static func + <Other>(Other, Self) -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/+(_:_:)-3dh6y"},{"type":"op","title":"static func + <Other>(Self, Other) -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/+(_:_:)-69lhz"},{"type":"op","title":"static func + <Other>(Self, Other) -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/+(_:_:)-9by0h"},{"type":"op","title":"static func += <Other>(inout Self, Other)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/+=(_:_:)"},{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init<S>(S)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(_:)"},{"type":"init","title":"init(repeating: Self.Element, count: Int)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/init(repeating:count:)"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func append(Self.Element)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/append(_:)"},{"type":"method","title":"func append<S>(contentsOf: S)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/append(contentsof:)-4fnoj"},{"type":"method","title":"func applying(CollectionDifference<Self.Element>) -> Self?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/applying(_:)"},{"type":"method","title":"func filter((Self.Element) throws -> Bool) rethrows -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/filter(_:)"},{"type":"method","title":"func insert(Self.Element, at: Self.Index)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/insert(_:at:)"},{"type":"method","title":"func insert<C>(contentsOf: C, at: Self.Index)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/insert(contentsof:at:)"},{"type":"method","title":"func popLast() -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/poplast()"},{"type":"method","title":"func remove(at: Self.Index) -> Self.Element","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/remove(at:)"},{"type":"method","title":"func removeAll(keepingCapacity: Bool)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removeall(keepingcapacity:)"},{"type":"method","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removeall(where:)-75du6"},{"type":"method","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removeall(where:)-9e4tj"},{"type":"method","title":"func removeFirst() -> Self.Element","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removefirst()"},{"type":"method","title":"func removeFirst(Int)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removefirst(_:)"},{"type":"method","title":"func removeLast() -> Self.Element","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removelast()"},{"type":"method","title":"func removeLast(Int)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removelast(_:)"},{"type":"method","title":"func removeSubrange(Range<Self.Index>)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removesubrange(_:)-4b3dl"},{"type":"method","title":"func removeSubrange<R>(R)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removesubrange(_:)-5goqi"},{"type":"method","title":"func removeSubranges(RangeSet<Self.Index>)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/removesubranges(_:)-56xzy"},{"type":"method","title":"func replace<C, Replacement>(C, with: Replacement, maxReplacements: Int)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/replace(_:with:maxreplacements:)"},{"type":"method","title":"func replaceSubrange(Range<XMLElement.Content.Index>, with: some Collection<XMLElement.Content.Element>)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/replacesubrange(_:with:)"},{"type":"method","title":"func replaceSubrange<C, R>(R, with: C)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/replacesubrange(_:with:)-3qvup"},{"type":"method","title":"func replaceSubrange<C>(Range<Self.Index>, with: C)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/replacesubrange(_:with:)-4dxdt"},{"type":"method","title":"func replacing<C, Replacement>(C, with: Replacement, maxReplacements: Int) -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/replacing(_:with:maxreplacements:)"},{"type":"method","title":"func replacing<C, Replacement>(C, with: Replacement, subrange: Range<Self.Index>, maxReplacements: Int) -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/replacing(_:with:subrange:maxreplacements:)"},{"type":"method","title":"func reserveCapacity(Int)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/reservecapacity(_:)"},{"type":"method","title":"func trimPrefix<Prefix>(Prefix)","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/trimprefix(_:)"},{"type":"method","title":"func trimPrefix(while: (Self.Element) throws -> Bool) rethrows","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/trimprefix(while:)"}]},{"title":"Sequence Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/sequence-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/lazy","title":"var lazy: LazySequence<Self>"},{"type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/underestimatedcount","title":"var underestimatedCount: Int"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/contains(_:)","title":"func contains(Self.Element) -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/flatmap(_:)-50w1t","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/flatmap(_:)-6lar","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","deprecated":true},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/map(_:)-12xfk","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/sorted(using:)-2qxab","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/sorted(using:)-5odpt","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool"},{"type":"method","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?"}]}]},{"type":"struct","title":"XMLElement.DocumentEncoding","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(rawValue: XMLElement.DocumentEncoding.RawValue)","type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/init(rawvalue:)"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var description: String","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/description"},{"title":"let rawValue: XMLElement.DocumentEncoding.RawValue","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/rawvalue-swift.property"},{"title":"Type Aliases","type":"groupMarker"},{"title":"XMLElement.DocumentEncoding.RawValue","type":"typealias","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/rawvalue-swift.typealias"},{"title":"Type Properties","type":"groupMarker"},{"title":"static let ascii: XMLElement.DocumentEncoding","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/ascii"},{"title":"static let utf16: XMLElement.DocumentEncoding","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/utf16"},{"title":"static let utf8: XMLElement.DocumentEncoding","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/utf8"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","type":"op","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/!=(_:_:)"}],"title":"Equatable Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/equatable-implementations"},{"children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var hashValue: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/hashvalue"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func hash(into: inout Hasher)","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/hash(into:)"}],"title":"RawRepresentable Implementations","type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/documentencoding\/rawrepresentable-implementations"}]},{"type":"struct","title":"XMLElement.DocumentVersion","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","title":"static func < (XMLElement.DocumentVersion, XMLElement.DocumentVersion) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/_(_:_:)"},{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init(major: Int, minor: Int)","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/init(major:minor:)"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var description: String","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/description"},{"type":"property","title":"var major: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/major"},{"type":"property","title":"var minor: Int","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/minor"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","title":"Comparable Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/comparable-implementations","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","title":"static func ... (Self) -> PartialRangeFrom<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/'...(_:)-5f3hz"},{"type":"op","title":"static func ... (Self) -> PartialRangeThrough<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/'...(_:)-9nili"},{"type":"op","title":"static func ... (Self, Self) -> ClosedRange<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/'...(_:_:)"},{"type":"op","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/'.._(_:)"},{"type":"op","title":"static func ..< (Self, Self) -> Range<Self>","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/'.._(_:_:)"},{"type":"op","title":"static func > (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/_(_:_:)-8n415"},{"type":"op","title":"static func >= (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/_=(_:_:)-9mt1x"},{"type":"op","title":"static func <= (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/_=(_:_:)-ctbn"}]},{"type":"symbol","title":"Equatable Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/equatable-implementations","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","title":"static func != (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/documentversion\/!=(_:_:)"}]}]},{"type":"struct","title":"XMLElement.MissingRootElementError","path":"\/documentation\/xmlwrangler\/xmlelement\/missingrootelementerror","children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var description: String","path":"\/documentation\/xmlwrangler\/xmlelement\/missingrootelementerror\/description","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"title":"Error Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/missingrootelementerror\/error-implementations","type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var localizedDescription: String","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/missingrootelementerror\/localizeddescription"}]}]},{"type":"struct","title":"XMLElement.Name","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct","children":[{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/init(_:)","type":"init","title":"init(XMLElement.Name.RawValue)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/init(rawvalue:)","type":"init","title":"init(rawValue: XMLElement.Name.RawValue)"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/init(stringliteral:)","type":"init","title":"init(stringLiteral: XMLElement.Name.StringLiteralType)"},{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/debugdescription","type":"property","title":"var debugDescription: String"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/description","type":"property","title":"var description: String"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/rawvalue-swift.property","type":"property","title":"let rawValue: XMLElement.Name.RawValue"},{"type":"groupMarker","title":"Type Aliases"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/rawvalue-swift.typealias","type":"typealias","title":"XMLElement.Name.RawValue"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/stringliteraltype","type":"typealias","title":"XMLElement.Name.StringLiteralType"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/equatable-implementations","type":"symbol","title":"Equatable Implementations","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/!=(_:_:)","type":"op"}]},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/expressiblebyextendedgraphemeclusterliteral-implementations","type":"symbol","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)"}]},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/expressiblebystringliteral-implementations","type":"symbol","title":"ExpressibleByStringLiteral Implementations","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)"}]},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/rawrepresentable-implementations","type":"symbol","title":"RawRepresentable Implementations","children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.struct\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}]}]},{"type":"struct","title":"XMLElement.SerializationOptions","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init(rawValue: XMLElement.SerializationOptions.RawValue)","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/init(rawvalue:)"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"let rawValue: XMLElement.SerializationOptions.RawValue","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/rawvalue-swift.property"},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","title":"XMLElement.SerializationOptions.RawValue","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/rawvalue-swift.typealias"},{"type":"groupMarker","title":"Type Properties"},{"type":"property","title":"static let explicitClosingTag: XMLElement.SerializationOptions","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/explicitclosingtag"},{"type":"property","title":"static let pretty: XMLElement.SerializationOptions","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/pretty"},{"type":"property","title":"static let singleQuoteAttributes: XMLElement.SerializationOptions","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/singlequoteattributes"},{"type":"groupMarker","title":"Default Implementations"},{"children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/!=(_:_:)","type":"op"}],"type":"symbol","title":"Equatable Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/equatable-implementations"},{"children":[{"title":"Initializers","type":"groupMarker"},{"title":"init()","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func contains(Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/contains(_:)","type":"method"},{"title":"func formIntersection(Self)","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/formintersection(_:)","type":"method"},{"title":"func formSymmetricDifference(Self)","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/formsymmetricdifference(_:)","type":"method"},{"title":"func formUnion(Self)","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/formunion(_:)","type":"method"},{"title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/insert(_:)","type":"method"},{"title":"func intersection(Self) -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/intersection(_:)","type":"method"},{"title":"func remove(Self.Element) -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/remove(_:)","type":"method"},{"title":"func symmetricDifference(Self) -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/symmetricdifference(_:)","type":"method"},{"title":"func union(Self) -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/union(_:)","type":"method"},{"title":"func update(with: Self.Element) -> Self.Element?","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/update(with:)","type":"method"}],"type":"symbol","title":"OptionSet Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/optionset-implementations"},{"children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init<S>(S)","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/init(_:)"},{"type":"init","title":"init(arrayLiteral: Self.Element...)","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/init(arrayliteral:)"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var isEmpty: Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/isempty"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func isDisjoint(with: Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/isdisjoint(with:)"},{"type":"method","title":"func isStrictSubset(of: Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/isstrictsubset(of:)"},{"type":"method","title":"func isStrictSuperset(of: Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/isstrictsuperset(of:)"},{"type":"method","title":"func isSubset(of: Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/issubset(of:)"},{"type":"method","title":"func isSuperset(of: Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/issuperset(of:)"},{"type":"method","title":"func subtract(Self)","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/subtract(_:)"},{"type":"method","title":"func subtracting(Self) -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/subtracting(_:)"}],"type":"symbol","title":"SetAlgebra Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/serializationoptions\/setalgebra-implementations"}]},{"type":"struct","title":"XMLElement.UnknownParsingError","path":"\/documentation\/xmlwrangler\/xmlelement\/unknownparsingerror","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var description: String","path":"\/documentation\/xmlwrangler\/xmlelement\/unknownparsingerror\/description"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmlwrangler\/xmlelement\/unknownparsingerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"title":"Error Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/unknownparsingerror\/error-implementations"}]},{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init(name: XMLElement.Name, attributes: XMLElement.Attributes, content: XMLElement.Content.Element...)","path":"\/documentation\/xmlwrangler\/xmlelement\/init(name:attributes:content:)-5rtdv"},{"type":"init","title":"init<E>(name: XMLElement.Name, attributes: XMLElement.Attributes, content: () async throws(E) -> XMLElement.Content) async throws(E)","path":"\/documentation\/xmlwrangler\/xmlelement\/init(name:attributes:content:)-81fri"},{"type":"init","title":"init<E>(name: XMLElement.Name, attributes: XMLElement.Attributes, content: () throws(E) -> XMLElement.Content) throws(E)","path":"\/documentation\/xmlwrangler\/xmlelement\/init(name:attributes:content:)-86ua4"},{"type":"init","title":"init(name: XMLElement.Name, attributes: XMLElement.Attributes, content: XMLElement.Content)","path":"\/documentation\/xmlwrangler\/xmlelement\/init(name:attributes:content:)-kgzp"},{"type":"init","title":"init(name: XMLElement.Name, attributes: XMLElement.Attributes, elements: XMLElement...)","path":"\/documentation\/xmlwrangler\/xmlelement\/init(name:attributes:elements:)-4kmbt"},{"type":"init","title":"init(name: XMLElement.Name, attributes: XMLElement.Attributes, elements: some Sequence<XMLElement>)","path":"\/documentation\/xmlwrangler\/xmlelement\/init(name:attributes:elements:)-7lxxa"},{"type":"init","title":"init(name: XMLElement.Name, attributes: XMLElement.Attributes, stringContent: XMLElement.Content.Element.StringPart)","path":"\/documentation\/xmlwrangler\/xmlelement\/init(name:attributes:stringcontent:)"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var attributes: XMLElement.Attributes","path":"\/documentation\/xmlwrangler\/xmlelement\/attributes-swift.property"},{"type":"property","title":"var content: XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlelement\/content-swift.property"},{"type":"property","title":"var debugDescription: String","path":"\/documentation\/xmlwrangler\/xmlelement\/debugdescription"},{"type":"property","title":"var description: String","path":"\/documentation\/xmlwrangler\/xmlelement\/description"},{"type":"property","title":"var id: XMLElement.Name","path":"\/documentation\/xmlwrangler\/xmlelement\/id"},{"type":"property","title":"let name: XMLElement.Name","path":"\/documentation\/xmlwrangler\/xmlelement\/name-swift.property"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func append(contentsOf: some Sequence<XMLElement>)","path":"\/documentation\/xmlwrangler\/xmlelement\/append(contentsof:)"},{"type":"method","title":"func append(elementOf: some XMLElementConvertible)","path":"\/documentation\/xmlwrangler\/xmlelement\/append(elementof:)"},{"type":"method","title":"func appendElement(XMLElement)","path":"\/documentation\/xmlwrangler\/xmlelement\/appendelement(_:)"},{"type":"method","title":"func appendElements(XMLElement...)","path":"\/documentation\/xmlwrangler\/xmlelement\/appendelements(_:)"},{"type":"method","title":"func appendString(XMLElement.Content.Element.StringPart)","path":"\/documentation\/xmlwrangler\/xmlelement\/appendstring(_:)"},{"type":"method","title":"func attribute(for: XMLElement.Attributes.Key) throws -> XMLElement.Attributes.Content","path":"\/documentation\/xmlwrangler\/xmlelement\/attribute(for:)"},{"type":"method","title":"func converted<Target>(to: Target.Type) throws -> Target","path":"\/documentation\/xmlwrangler\/xmlelement\/converted(to:)"},{"type":"method","title":"func convertedAttribute<Target>(for: XMLElement.Attributes.Key) throws -> Target","path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:)-1x866"},{"type":"method","title":"func convertedAttribute<T>(for: XMLElement.Attributes.Key) throws -> T","path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:)-29eim"},{"type":"method","title":"func convertedAttribute<Target>(for: XMLElement.Attributes.Key) throws -> Target","path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:)-3butp"},{"type":"method","title":"func convertedAttribute<T>(for: XMLElement.Attributes.Key) throws -> T","path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:)-3wjco"},{"type":"method","title":"func convertedAttribute<Target>(for: XMLElement.Attributes.Key) throws -> Target","path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:)-7n67i"},{"type":"method","title":"func convertedAttribute<T>(for: XMLElement.Attributes.Key) throws -> T","path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:)-7pgeq"},{"type":"method","title":"func convertedAttribute<Target>(for: XMLElement.Attributes.Key) throws -> Target","path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:)-j6st"},{"type":"method","title":"func convertedAttribute<T>(for: XMLElement.Attributes.Key, converter: (XMLElement.Attributes.Content) throws -> T?) throws -> T","path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:converter:)-1pm40"},{"type":"method","title":"func convertedAttribute<T>(for: XMLElement.Attributes.Key, converter: (XMLElement.Attributes.Content) throws -> T) throws -> T","path":"\/documentation\/xmlwrangler\/xmlelement\/convertedattribute(for:converter:)-2tsl"},{"type":"method","title":"func convertedStringContent<T>() throws -> T","path":"\/documentation\/xmlwrangler\/xmlelement\/convertedstringcontent()-44s62"},{"type":"method","title":"func convertedStringContent<T>() throws -> T","path":"\/documentation\/xmlwrangler\/xmlelement\/convertedstringcontent()-4i8zf"},{"type":"method","title":"func convertedStringContent<T>() throws -> T","path":"\/documentation\/xmlwrangler\/xmlelement\/convertedstringcontent()-6gudh"},{"type":"method","title":"func convertedStringContent<T>(converter: (String) throws -> T?) throws -> T","path":"\/documentation\/xmlwrangler\/xmlelement\/convertedstringcontent(converter:)-1fj6u"},{"type":"method","title":"func convertedStringContent<T>(converter: (String) throws -> T) throws -> T","path":"\/documentation\/xmlwrangler\/xmlelement\/convertedstringcontent(converter:)-5nxzr"},{"type":"method","title":"func element(at: some Collection<XMLElement.Name>) throws -> XMLElement","path":"\/documentation\/xmlwrangler\/xmlelement\/element(at:)-45kz"},{"type":"method","title":"func element(at: XMLElement.Name...) throws -> XMLElement","path":"\/documentation\/xmlwrangler\/xmlelement\/element(at:)-7xp8e"},{"type":"method","title":"func elements(named: XMLElement.Name) throws -> Array<XMLElement>","path":"\/documentation\/xmlwrangler\/xmlelement\/elements(named:)"},{"type":"method","title":"func remove(elementAt: XMLElement.Name...) throws -> XMLElement?","path":"\/documentation\/xmlwrangler\/xmlelement\/remove(elementat:)-9v7qi"},{"type":"method","title":"func remove(elementAt: some Collection<XMLElement.Name>) throws -> XMLElement?","path":"\/documentation\/xmlwrangler\/xmlelement\/remove(elementat:)-9ydn7"},{"type":"method","title":"func replace(elementAt: XMLElement.Name..., with: XMLElement) throws -> XMLElement","path":"\/documentation\/xmlwrangler\/xmlelement\/replace(elementat:with:)-1onn0"},{"type":"method","title":"func replace(elementAt: some Collection<XMLElement.Name>, with: XMLElement) throws -> XMLElement","path":"\/documentation\/xmlwrangler\/xmlelement\/replace(elementat:with:)-4vaaw"},{"type":"method","title":"func serialize(with: XMLElement.SerializationOptions) -> String","path":"\/documentation\/xmlwrangler\/xmlelement\/serialize(with:)"},{"type":"method","title":"func serializeAsDocument(at: XMLElement.DocumentVersion, in: XMLElement.DocumentEncoding, with: XMLElement.SerializationOptions) -> String","path":"\/documentation\/xmlwrangler\/xmlelement\/serializeasdocument(at:in:with:)"},{"type":"method","title":"func stringContent() throws -> String","path":"\/documentation\/xmlwrangler\/xmlelement\/stringcontent()"},{"type":"method","title":"func withMutatingAccess<T>(toElementAt: XMLElement.Name..., do: (inout XMLElement) throws -> T) throws -> T","path":"\/documentation\/xmlwrangler\/xmlelement\/withmutatingaccess(toelementat:do:)-47tub"},{"type":"method","title":"func withMutatingAccess<T>(toElementAt: some Collection<XMLElement.Name>, do: (inout XMLElement) throws -> T) throws -> T","path":"\/documentation\/xmlwrangler\/xmlelement\/withmutatingaccess(toelementat:do:)-98ke7"},{"type":"groupMarker","title":"Type Methods"},{"type":"method","title":"static func parse(some StringProtocol) throws -> XMLElement","path":"\/documentation\/xmlwrangler\/xmlelement\/parse(_:)-3lced"},{"type":"method","title":"static func parse(Data) throws -> XMLElement","path":"\/documentation\/xmlwrangler\/xmlelement\/parse(_:)-43xl1"},{"type":"groupMarker","title":"Enumerations"},{"type":"enum","title":"XMLElement.EscapableContent","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent","children":[{"title":"Enumeration Cases","type":"groupMarker"},{"title":"case attribute(quotes: XMLElement.EscapableContent.Quotes)","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/attribute(quotes:)","type":"case"},{"title":"case cdata","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/cdata","type":"case"},{"title":"case comment","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/comment","type":"case"},{"title":"case processingInstruction","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/processinginstruction","type":"case"},{"title":"case text","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/text","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var description: String","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/description","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func escape(some StringProtocol) -> String","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/escape(_:)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"type":"groupMarker","title":"Enumeration Cases"},{"type":"case","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/quotes\/double","title":"case double"},{"type":"case","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/quotes\/single","title":"case single"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/quotes\/description","title":"var description: String"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/quotes\/equatable-implementations","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","title":"static func != (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/quotes\/!=(_:_:)"}],"title":"Equatable Implementations"}],"title":"XMLElement.EscapableContent.Quotes","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/quotes","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/!=(_:_:)","type":"op"}],"title":"Equatable Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/escapablecontent\/equatable-implementations","type":"symbol"}]},{"type":"enum","title":"XMLElement.LookupError","path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror","children":[{"title":"Enumeration Cases","type":"groupMarker"},{"title":"case cannotConvertAttribute(element: XMLElement, key: XMLElement.Attributes.Key, content: XMLElement.Attributes.Content, type: any Any.Type)","type":"case","path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/cannotconvertattribute(element:key:content:type:)"},{"title":"case cannotConvertStringContent(element: XMLElement, stringContent: XMLElement.Content.Element.StringPart, type: any Any.Type)","type":"case","path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/cannotconvertstringcontent(element:stringcontent:type:)"},{"title":"case missingAttribute(element: XMLElement, key: XMLElement.Attributes.Key)","type":"case","path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/missingattribute(element:key:)"},{"title":"case missingChild(element: XMLElement, childName: XMLElement.Name)","type":"case","path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/missingchild(element:childname:)"},{"title":"case missingStringContent(element: XMLElement)","type":"case","path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/missingstringcontent(element:)"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var description: String","type":"property","path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/description"},{"title":"Default Implementations","type":"groupMarker"},{"title":"Error Implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var localizedDescription: String","path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/localizeddescription"}],"path":"\/documentation\/xmlwrangler\/xmlelement\/lookuperror\/error-implementations"}]},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","title":"Equatable Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/equatable-implementations","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","path":"\/documentation\/xmlwrangler\/xmlelement\/!=(_:_:)","type":"op"}]},{"type":"symbol","title":"ExpressibleByXMLElement Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/expressiblebyxmlelement-implementations","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(xml: XMLElement)","path":"\/documentation\/xmlwrangler\/xmlelement\/init(xml:)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"title":"static func parsedFromXML(Data) throws -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/parsedfromxml(_:)-42ard","type":"method"},{"title":"static func parsedFromXML(some StringProtocol) throws -> Self","path":"\/documentation\/xmlwrangler\/xmlelement\/parsedfromxml(_:)-6bn3s","type":"method"}]},{"type":"symbol","title":"XMLElementConvertible Implementations","path":"\/documentation\/xmlwrangler\/xmlelement\/xmlelementconvertible-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var xml: XMLElement","path":"\/documentation\/xmlwrangler\/xmlelement\/xml"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func serializeAsXML(with: XMLElement.SerializationOptions) -> String","path":"\/documentation\/xmlwrangler\/xmlelement\/serializeasxml(with:)"},{"type":"method","title":"func serializeAsXMLDocument(at: XMLElement.DocumentVersion, in: XMLElement.DocumentEncoding, with: XMLElement.SerializationOptions) -> String","path":"\/documentation\/xmlwrangler\/xmlelement\/serializeasxmldocument(at:in:with:)"}]}],"title":"XMLElement"},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","path":"\/documentation\/xmlwrangler\/xmlattributecontentrepresentable","title":"XMLAttributeContentRepresentable"},{"type":"typealias","path":"\/documentation\/xmlwrangler\/xmlelementrepresentable","title":"XMLElementRepresentable"},{"type":"typealias","path":"\/documentation\/xmlwrangler\/xwelement","title":"XWElement"},{"type":"groupMarker","title":"Enumerations"},{"type":"enum","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder","children":[{"title":"Type Methods","type":"groupMarker"},{"title":"static func buildArray(Array<XMLElement.Content>) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildarray(_:)","type":"method"},{"title":"static func buildBlock() -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildblock()","type":"method"},{"title":"static func buildBlock(XMLElement.Content...) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildblock(_:)-1udrp","type":"method"},{"title":"static func buildBlock(XMLElement.Content) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildblock(_:)-3tzma","type":"method"},{"title":"static func buildEither(first: XMLElement.Content) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildeither(first:)","type":"method"},{"title":"static func buildEither(second: XMLElement.Content) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildeither(second:)","type":"method"},{"title":"static func buildExpression(String) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildexpression(_:)-4endp","type":"method"},{"title":"static func buildExpression(XMLElement) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildexpression(_:)-4lv7q","type":"method"},{"title":"static func buildExpression(some XMLElementConvertible) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildexpression(_:)-6pqxb","type":"method"},{"title":"static func buildExpression(XMLElement.Content.Element) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildexpression(_:)-8e32w","type":"method"},{"title":"static func buildFinalResult(XMLElement.Content) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildfinalresult(_:)","type":"method"},{"title":"static func buildOptional(XMLElement.Content?) -> XMLElement.Content","path":"\/documentation\/xmlwrangler\/xmlcontentbuilder\/buildoptional(_:)","type":"method"}],"title":"XMLContentBuilder"},{"type":"groupMarker","title":"Extended Modules"},{"type":"extension","path":"\/documentation\/xmlwrangler\/swift","children":[{"title":"Extended Protocols","type":"groupMarker"},{"title":"Sequence","path":"\/documentation\/xmlwrangler\/swift\/sequence","type":"extension","children":[{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/xmlwrangler\/swift\/sequence\/converted(to:)","type":"method","title":"func converted<Target>(to: Target.Type) throws -> Array<Target>"}]},{"title":"Extended Structures","type":"groupMarker"},{"title":"Dictionary","path":"\/documentation\/xmlwrangler\/swift\/dictionary","type":"extension","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","path":"\/documentation\/xmlwrangler\/swift\/dictionary\/init(elementsof:)","title":"init(elementsOf: XMLElement.Attributes)"}]},{"title":"String","path":"\/documentation\/xmlwrangler\/swift\/string","type":"extension","children":[{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","path":"\/documentation\/xmlwrangler\/swift\/string\/expressiblebyxmlattributecontent-implementations","title":"ExpressibleByXMLAttributeContent Implementations","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(xmlAttributeContent: XMLElement.Attributes.Content)","path":"\/documentation\/xmlwrangler\/swift\/string\/init(xmlattributecontent:)","type":"init"},{"title":"init?(xmlAttributeContent: XMLElement.Attributes.Content)","path":"\/documentation\/xmlwrangler\/swift\/string\/init(xmlattributecontent:)-85b9j","type":"init"}]},{"type":"symbol","path":"\/documentation\/xmlwrangler\/swift\/string\/xmlattributecontentconvertible-implementations","title":"XMLAttributeContentConvertible Implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","title":"var xmlAttributeContent: XMLElement.Attributes.Content","path":"\/documentation\/xmlwrangler\/swift\/string\/xmlattributecontent"}]}]}],"title":"Swift"}]}]}]},"includedArchiveIdentifiers":["XMLWrangler"],"schemaVersion":{"major":0,"patch":2,"minor":1}}